!function(Q){var F=window.webpackHotUpdate;window.webpackHotUpdate=function(Q,B){!function(Q,F){if(!g[Q]||!C[Q])return;for(var B in C[Q]=!1,F)Object.prototype.hasOwnProperty.call(F,B)&&(b[B]=F[B]);0==--o&&0===X&&V()}(Q,B),F&&F(Q,B)};var B,n=!0,U="ce90528184878152e161",c=1e4,t={},s=[],l=[];function d(Q){var F=u[Q];if(!F)return H;var n=function(n){return F.hot.active?(u[n]?-1===u[n].parents.indexOf(Q)&&u[n].parents.push(Q):(s=[Q],B=n),-1===F.children.indexOf(n)&&F.children.push(n)):(console.warn("[HMR] unexpected require("+n+") from disposed module "+Q),s=[]),H(n)},U=function(Q){return{configurable:!0,enumerable:!0,get:function(){return H[Q]},set:function(F){H[Q]=F}}};for(var c in H)Object.prototype.hasOwnProperty.call(H,c)&&"e"!==c&&"t"!==c&&Object.defineProperty(n,c,U(c));return n.e=function(Q){return"ready"===x&&i("prepare"),X++,H.e(Q).then(F,function(Q){throw F(),Q});function F(){X--,"prepare"===x&&(a[Q]||L(Q),0===X&&0===o&&V())}},n.t=function(Q,F){return 1&F&&(Q=n(Q)),H.t(Q,-2&F)},n}var e=[],x="idle";function i(Q){x=Q;for(var F=0;F<e.length;F++)e[F].call(null,Q)}var R,b,I,o=0,X=0,a={},C={},g={};function G(Q){return+Q+""===Q?+Q:Q}function E(Q){if("idle"!==x)throw new Error("check() is only allowed in idle status");return n=Q,i("check"),function(Q){return Q=Q||1e4,new Promise(function(F,B){if("undefined"==typeof XMLHttpRequest)return B(new Error("No browser support"));try{var n=new XMLHttpRequest,c=H.p+""+U+".hot-update.json";n.open("GET",c,!0),n.timeout=Q,n.send(null)}catch(Q){return B(Q)}n.onreadystatechange=function(){if(4===n.readyState)if(0===n.status)B(new Error("Manifest request to "+c+" timed out."));else if(404===n.status)F();else if(200!==n.status&&304!==n.status)B(new Error("Manifest request to "+c+" failed."));else{try{var Q=JSON.parse(n.responseText)}catch(Q){return void B(Q)}F(Q)}}})}(c).then(function(Q){if(!Q)return i("idle"),null;C={},a={},g=Q.c,I=Q.h,i("prepare");var F=new Promise(function(Q,F){R={resolve:Q,reject:F}});b={};return L(0),"prepare"===x&&0===X&&0===o&&V(),F})}function L(Q){g[Q]?(C[Q]=!0,o++,function(Q){var F=document.getElementsByTagName("head")[0],B=document.createElement("script");B.charset="utf-8",B.src=H.p+""+Q+"."+U+".hot-update.js",F.appendChild(B)}(Q)):a[Q]=!0}function V(){i("ready");var Q=R;if(R=null,Q)if(n)Promise.resolve().then(function(){return r(n)}).then(function(F){Q.resolve(F)},function(F){Q.reject(F)});else{var F=[];for(var B in b)Object.prototype.hasOwnProperty.call(b,B)&&F.push(G(B));Q.resolve(F)}}function r(F){if("ready"!==x)throw new Error("apply() is only allowed in ready status");var B,n,c,l,d;function e(Q){for(var F=[Q],B={},n=F.slice().map(function(Q){return{chain:[Q],id:Q}});n.length>0;){var U=n.pop(),c=U.id,t=U.chain;if((l=u[c])&&!l.hot._selfAccepted){if(l.hot._selfDeclined)return{type:"self-declined",chain:t,moduleId:c};if(l.hot._main)return{type:"unaccepted",chain:t,moduleId:c};for(var s=0;s<l.parents.length;s++){var d=l.parents[s],e=u[d];if(e){if(e.hot._declinedDependencies[c])return{type:"declined",chain:t.concat([d]),moduleId:c,parentId:d};-1===F.indexOf(d)&&(e.hot._acceptedDependencies[c]?(B[d]||(B[d]=[]),R(B[d],[c])):(delete B[d],F.push(d),n.push({chain:t.concat([d]),id:d})))}}}}return{type:"accepted",moduleId:Q,outdatedModules:F,outdatedDependencies:B}}function R(Q,F){for(var B=0;B<F.length;B++){var n=F[B];-1===Q.indexOf(n)&&Q.push(n)}}F=F||{};var o={},X=[],a={},C=function(){console.warn("[HMR] unexpected require("+L.moduleId+") to disposed module")};for(var E in b)if(Object.prototype.hasOwnProperty.call(b,E)){var L;d=G(E);var V=!1,r=!1,Z=!1,y="";switch((L=b[E]?e(d):{type:"disposed",moduleId:E}).chain&&(y="\nUpdate propagation: "+L.chain.join(" -> ")),L.type){case"self-declined":F.onDeclined&&F.onDeclined(L),F.ignoreDeclined||(V=new Error("Aborted because of self decline: "+L.moduleId+y));break;case"declined":F.onDeclined&&F.onDeclined(L),F.ignoreDeclined||(V=new Error("Aborted because of declined dependency: "+L.moduleId+" in "+L.parentId+y));break;case"unaccepted":F.onUnaccepted&&F.onUnaccepted(L),F.ignoreUnaccepted||(V=new Error("Aborted because "+d+" is not accepted"+y));break;case"accepted":F.onAccepted&&F.onAccepted(L),r=!0;break;case"disposed":F.onDisposed&&F.onDisposed(L),Z=!0;break;default:throw new Error("Unexception type "+L.type)}if(V)return i("abort"),Promise.reject(V);if(r)for(d in a[d]=b[d],R(X,L.outdatedModules),L.outdatedDependencies)Object.prototype.hasOwnProperty.call(L.outdatedDependencies,d)&&(o[d]||(o[d]=[]),R(o[d],L.outdatedDependencies[d]));Z&&(R(X,[L.moduleId]),a[d]=C)}var N,W=[];for(n=0;n<X.length;n++)d=X[n],u[d]&&u[d].hot._selfAccepted&&W.push({module:d,errorHandler:u[d].hot._selfAccepted});i("dispose"),Object.keys(g).forEach(function(Q){!1===g[Q]&&function(Q){delete installedChunks[Q]}(Q)});for(var m,p,S=X.slice();S.length>0;)if(d=S.pop(),l=u[d]){var h={},J=l.hot._disposeHandlers;for(c=0;c<J.length;c++)(B=J[c])(h);for(t[d]=h,l.hot.active=!1,delete u[d],delete o[d],c=0;c<l.children.length;c++){var D=u[l.children[c]];D&&((N=D.parents.indexOf(d))>=0&&D.parents.splice(N,1))}}for(d in o)if(Object.prototype.hasOwnProperty.call(o,d)&&(l=u[d]))for(p=o[d],c=0;c<p.length;c++)m=p[c],(N=l.children.indexOf(m))>=0&&l.children.splice(N,1);for(d in i("apply"),U=I,a)Object.prototype.hasOwnProperty.call(a,d)&&(Q[d]=a[d]);var v=null;for(d in o)if(Object.prototype.hasOwnProperty.call(o,d)&&(l=u[d])){p=o[d];var A=[];for(n=0;n<p.length;n++)if(m=p[n],B=l.hot._acceptedDependencies[m]){if(-1!==A.indexOf(B))continue;A.push(B)}for(n=0;n<A.length;n++){B=A[n];try{B(p)}catch(Q){F.onErrored&&F.onErrored({type:"accept-errored",moduleId:d,dependencyId:p[n],error:Q}),F.ignoreErrored||v||(v=Q)}}}for(n=0;n<W.length;n++){var Y=W[n];d=Y.module,s=[d];try{H(d)}catch(Q){if("function"==typeof Y.errorHandler)try{Y.errorHandler(Q)}catch(B){F.onErrored&&F.onErrored({type:"self-accept-error-handler-errored",moduleId:d,error:B,originalError:Q}),F.ignoreErrored||v||(v=B),v||(v=Q)}else F.onErrored&&F.onErrored({type:"self-accept-errored",moduleId:d,error:Q}),F.ignoreErrored||v||(v=Q)}}return v?(i("fail"),Promise.reject(v)):(i("idle"),new Promise(function(Q){Q(X)}))}var u={};function H(F){if(u[F])return u[F].exports;var n=u[F]={i:F,l:!1,exports:{},hot:function(Q){var F={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:B!==Q,active:!0,accept:function(Q,B){if(void 0===Q)F._selfAccepted=!0;else if("function"==typeof Q)F._selfAccepted=Q;else if("object"==typeof Q)for(var n=0;n<Q.length;n++)F._acceptedDependencies[Q[n]]=B||function(){};else F._acceptedDependencies[Q]=B||function(){}},decline:function(Q){if(void 0===Q)F._selfDeclined=!0;else if("object"==typeof Q)for(var B=0;B<Q.length;B++)F._declinedDependencies[Q[B]]=!0;else F._declinedDependencies[Q]=!0},dispose:function(Q){F._disposeHandlers.push(Q)},addDisposeHandler:function(Q){F._disposeHandlers.push(Q)},removeDisposeHandler:function(Q){var B=F._disposeHandlers.indexOf(Q);B>=0&&F._disposeHandlers.splice(B,1)},check:E,apply:r,status:function(Q){if(!Q)return x;e.push(Q)},addStatusHandler:function(Q){e.push(Q)},removeStatusHandler:function(Q){var F=e.indexOf(Q);F>=0&&e.splice(F,1)},data:t[Q]};return B=void 0,F}(F),parents:(l=s,s=[],l),children:[]};return Q[F].call(n.exports,n,n.exports,d(F)),n.l=!0,n.exports}H.m=Q,H.c=u,H.d=function(Q,F,B){H.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:B})},H.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},H.t=function(Q,F){if(1&F&&(Q=H(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(H.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var n in Q)H.d(B,n,function(F){return Q[F]}.bind(null,n));return B},H.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return H.d(F,"a",F),F},H.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},H.p="",H.h=function(){return U},d(6)(H.s=6)}([function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(3)(false);\n// imports\n\n\n// module\nexports.push([module.i, "p {\\n  margin: 0;\\n  padding: 0; }\\n\\nli {\\n  list-style-type: none; }\\n\\ni {\\n  cursor: pointer; }\\n\\n.btn-floating:hover {\\n  background-color: #2bbbad; }\\n\\n::-webkit-scrollbar {\\n  width: 0px;\\n  /* remove scrollbar space */\\n  background: transparent;\\n  /* optional: just make scrollbar invisible */ }\\n\\n/* optional: show position indicator in red */\\n::-webkit-scrollbar-thumb {\\n  background: #FF0000; }\\n\\nh1 {\\n  margin: 0; }\\n\\nnav {\\n  background-color: #e66053; }\\n\\n#nav-mobile {\\n  text-transform: uppercase; }\\n\\n.pulse {\\n  margin: 0 auto; }\\n\\n.row .col {\\n  padding: 0;\\n  margin-right: 10px;\\n  max-width: 300px; }\\n\\n.blue-grey:hover {\\n  background-color: #6b8a99 !important; }\\n\\n#Datepickk .d-table input + label {\\n  height: 100px;\\n  border: 1px solid lightgray; }\\n\\n#Datepickk .d-tables {\\n  background-color: #F6E9DC; }\\n\\n#calendar {\\n  margin: 0 auto;\\n  border: 1px solid #000;\\n  width: 252px;\\n  position: relative;\\n  overflow: hidden; }\\n\\n#date {\\n  margin: 10px; }\\n\\n.buttons {\\n  position: absolute;\\n  top: 8px;\\n  right: 10px; }\\n\\n.button {\\n  cursor: pointer;\\n  -webkit-user-select: none;\\n  -moz-user-select: none;\\n  user-select: none; }\\n\\n.day {\\n  display: inline-block;\\n  width: 20px;\\n  height: 20px;\\n  line-height: 20px;\\n  margin: 2px;\\n  padding: 0 1px;\\n  border: 1px solid transparent;\\n  margin-right: 11px;\\n  text-align: center;\\n  cursor: pointer;\\n  transition: background .1s, color .1s; }\\n\\n.day:hover {\\n  border: 1px solid #000 !important;\\n  color: #fff;\\n  background: #000 !important; }\\n\\n.day.today {\\n  border: 1px solid #000 !important;\\n  color: #fff;\\n  background: #000 !important; }\\n\\n.day.other {\\n  visibility: hidden; }\\n\\n.daysName {\\n  background: #ddd;\\n  border-bottom: 1px solid #999;\\n  border-top: 1px solid #999;\\n  margin-right: -9px; }\\n\\n#days {\\n  margin-right: -9px; }\\n\\n.daysName div {\\n  display: inline-block;\\n  width: 20px;\\n  height: 20px;\\n  padding: 0 1px;\\n  margin: 3px;\\n  margin-right: 8px;\\n  font-size: 14px;\\n  line-height: 20px;\\n  cursor: pointer; }\\n\\nbody {\\n  min-height: 100vh;\\n  margin: 0;\\n  padding: 0;\\n  background: slategrey;\\n  color: #212121;\\n  overflow: scroll !important; }\\n  body #outlet {\\n    background-color: slategrey; }\\n    body #outlet .board {\\n      background: slategrey;\\n      min-height: 100vh; }\\n      body #outlet .board .col {\\n        min-height: 500px;\\n        max-height: 500px;\\n        overflow-y: scroll;\\n        background-color: #F6E9DC;\\n        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.19), 0 6px 6px rgba(0, 0, 0, 0.23);\\n        border-radius: 6px;\\n        margin: 25px 0px;\\n        margin-right: 10px; }\\n        body #outlet .board .col header {\\n          background: #26a69a;\\n          padding: 10px;\\n          position: relative;\\n          border-radius: 6px 6px 0 0;\\n          min-height: 110px;\\n          box-shadow: 0px 2px 4px rgba(44, 62, 80, 0.15); }\\n          body #outlet .board .col header h5 {\\n            position: relative;\\n            color: darkslategray;\\n            margin: 0;\\n            margin-bottom: 10px; }\\n            body #outlet .board .col header h5 i {\\n              position: absolute;\\n              right: 0;\\n              cursor: pointer; }\\n              body #outlet .board .col header h5 i:hover {\\n                color: #d14a4a !important; }\\n        body #outlet .board .col ul {\\n          margin: 0;\\n          padding: 10px;\\n          max-width: 100%; }\\n          body #outlet .board .col ul li {\\n            position: relative;\\n            text-align: justify;\\n            border-radius: 3px;\\n            margin-top: 5px;\\n            cursor: move;\\n            box-shadow: 0px 1px 2px rgba(44, 62, 80, 0.1);\\n            background-color: #FFF;\\n            border-bottom: 1px solid #CCC;\\n            padding: 6px 8px;\\n            cursor: move; }\\n            body #outlet .board .col ul li img {\\n              cursor: pointer; }\\n            body #outlet .board .col ul li p {\\n              display: block;\\n              min-height: 21px; }\\n              body #outlet .board .col ul li p:last-child {\\n                text-align: right; }\\n            body #outlet .board .col ul li .date {\\n              font-size: .7rem;\\n              font-style: italic;\\n              text-align: right; }\\n            body #outlet .board .col ul li .remove-post {\\n              position: absolute;\\n              right: 0;\\n              top: 0; }\\n              body #outlet .board .col ul li .remove-post i:hover {\\n                color: #d65f5f !important; }\\n            body #outlet .board .col ul li .toggle-post {\\n              position: absolute;\\n              right: 20px;\\n              top: 0; }\\n            body #outlet .board .col ul li a {\\n              margin-top: 10px; }\\n      body #outlet .board .new-section {\\n        border: none;\\n        border: 1.5px dashed #212121;\\n        border-radius: 10px; }\\n        body #outlet .board .new-section span {\\n          color: var(#26a69a);\\n          opacity: .5;\\n          font-size: 80px;\\n          cursor: pointer;\\n          transition: all .5s; }\\n          body #outlet .board .new-section span:hover {\\n            opacity: .8; }\\n", ""]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;/**!\n * Sortable\n * @author\tRubaXa   <trash@rubaxa.org>\n * @license MIT\n */\n(function sortableModule(factory) {\n  \"use strict\";\n\n  if (true) {\n    !(__WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\n\t\t\t\t__WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(function sortableFactory() {\n  \"use strict\";\n\n  if (typeof window === \"undefined\" || !window.document) {\n    return function sortableError() {\n      throw new Error(\"Sortable.js requires a window with a document\");\n    };\n  }\n\n  var dragEl,\n      parentEl,\n      ghostEl,\n      cloneEl,\n      rootEl,\n      nextEl,\n      lastDownEl,\n      scrollEl,\n      scrollParentEl,\n      scrollCustomFn,\n      lastEl,\n      lastCSS,\n      lastParentCSS,\n      oldIndex,\n      newIndex,\n      activeGroup,\n      putSortable,\n      autoScroll = {},\n      tapEvt,\n      touchEvt,\n      moved,\n\n  /** @const */\n  R_SPACE = /\\s+/g,\n      R_FLOAT = /left|right|inline/,\n      expando = 'Sortable' + new Date().getTime(),\n      win = window,\n      document = win.document,\n      parseInt = win.parseInt,\n      setTimeout = win.setTimeout,\n      $ = win.jQuery || win.Zepto,\n      Polymer = win.Polymer,\n      captureMode = false,\n      passiveMode = false,\n      supportDraggable = 'draggable' in document.createElement('div'),\n      supportCssPointerEvents = function (el) {\n    // false when IE11\n    if (!!navigator.userAgent.match(/(?:Trident.*rv[ :]?11\\.|msie)/i)) {\n      return false;\n    }\n\n    el = document.createElement('x');\n    el.style.cssText = 'pointer-events:auto';\n    return el.style.pointerEvents === 'auto';\n  }(),\n      _silent = false,\n      abs = Math.abs,\n      min = Math.min,\n      savedInputChecked = [],\n      touchDragOverListeners = [],\n      _autoScroll = _throttle(function (\n  /**Event*/\n  evt,\n  /**Object*/\n  options,\n  /**HTMLElement*/\n  rootEl) {\n    // Bug: https://bugzilla.mozilla.org/show_bug.cgi?id=505521\n    if (rootEl && options.scroll) {\n      var _this = rootEl[expando],\n          el,\n          rect,\n          sens = options.scrollSensitivity,\n          speed = options.scrollSpeed,\n          x = evt.clientX,\n          y = evt.clientY,\n          winWidth = window.innerWidth,\n          winHeight = window.innerHeight,\n          vx,\n          vy,\n          scrollOffsetX,\n          scrollOffsetY; // Delect scrollEl\n\n      if (scrollParentEl !== rootEl) {\n        scrollEl = options.scroll;\n        scrollParentEl = rootEl;\n        scrollCustomFn = options.scrollFn;\n\n        if (scrollEl === true) {\n          scrollEl = rootEl;\n\n          do {\n            if (scrollEl.offsetWidth < scrollEl.scrollWidth || scrollEl.offsetHeight < scrollEl.scrollHeight) {\n              break;\n            }\n            /* jshint boss:true */\n\n          } while (scrollEl = scrollEl.parentNode);\n        }\n      }\n\n      if (scrollEl) {\n        el = scrollEl;\n        rect = scrollEl.getBoundingClientRect();\n        vx = (abs(rect.right - x) <= sens) - (abs(rect.left - x) <= sens);\n        vy = (abs(rect.bottom - y) <= sens) - (abs(rect.top - y) <= sens);\n      }\n\n      if (!(vx || vy)) {\n        vx = (winWidth - x <= sens) - (x <= sens);\n        vy = (winHeight - y <= sens) - (y <= sens);\n        /* jshint expr:true */\n\n        (vx || vy) && (el = win);\n      }\n\n      if (autoScroll.vx !== vx || autoScroll.vy !== vy || autoScroll.el !== el) {\n        autoScroll.el = el;\n        autoScroll.vx = vx;\n        autoScroll.vy = vy;\n        clearInterval(autoScroll.pid);\n\n        if (el) {\n          autoScroll.pid = setInterval(function () {\n            scrollOffsetY = vy ? vy * speed : 0;\n            scrollOffsetX = vx ? vx * speed : 0;\n\n            if ('function' === typeof scrollCustomFn) {\n              return scrollCustomFn.call(_this, scrollOffsetX, scrollOffsetY, evt);\n            }\n\n            if (el === win) {\n              win.scrollTo(win.pageXOffset + scrollOffsetX, win.pageYOffset + scrollOffsetY);\n            } else {\n              el.scrollTop += scrollOffsetY;\n              el.scrollLeft += scrollOffsetX;\n            }\n          }, 24);\n        }\n      }\n    }\n  }, 30),\n      _prepareGroup = function (options) {\n    function toFn(value, pull) {\n      if (value === void 0 || value === true) {\n        value = group.name;\n      }\n\n      if (typeof value === 'function') {\n        return value;\n      } else {\n        return function (to, from) {\n          var fromGroup = from.options.group.name;\n          return pull ? value : value && (value.join ? value.indexOf(fromGroup) > -1 : fromGroup == value);\n        };\n      }\n    }\n\n    var group = {};\n    var originalGroup = options.group;\n\n    if (!originalGroup || typeof originalGroup != 'object') {\n      originalGroup = {\n        name: originalGroup\n      };\n    }\n\n    group.name = originalGroup.name;\n    group.checkPull = toFn(originalGroup.pull, true);\n    group.checkPut = toFn(originalGroup.put);\n    group.revertClone = originalGroup.revertClone;\n    options.group = group;\n  }; // Detect support a passive mode\n\n\n  try {\n    window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n      get: function () {\n        // `false`, because everything starts to work incorrectly and instead of d'n'd,\n        // begins the page has scrolled.\n        passiveMode = false;\n        captureMode = {\n          capture: false,\n          passive: passiveMode\n        };\n      }\n    }));\n  } catch (err) {}\n  /**\n   * @class  Sortable\n   * @param  {HTMLElement}  el\n   * @param  {Object}       [options]\n   */\n\n\n  function Sortable(el, options) {\n    if (!(el && el.nodeType && el.nodeType === 1)) {\n      throw 'Sortable: `el` must be HTMLElement, and not ' + {}.toString.call(el);\n    }\n\n    this.el = el; // root element\n\n    this.options = options = _extend({}, options); // Export instance\n\n    el[expando] = this; // Default options\n\n    var defaults = {\n      group: Math.random(),\n      sort: true,\n      disabled: false,\n      store: null,\n      handle: null,\n      scroll: true,\n      scrollSensitivity: 30,\n      scrollSpeed: 10,\n      draggable: /[uo]l/i.test(el.nodeName) ? 'li' : '>*',\n      ghostClass: 'sortable-ghost',\n      chosenClass: 'sortable-chosen',\n      dragClass: 'sortable-drag',\n      ignore: 'a, img',\n      filter: null,\n      preventOnFilter: true,\n      animation: 0,\n      setData: function (dataTransfer, dragEl) {\n        dataTransfer.setData('Text', dragEl.textContent);\n      },\n      dropBubble: false,\n      dragoverBubble: false,\n      dataIdAttr: 'data-id',\n      delay: 0,\n      forceFallback: false,\n      fallbackClass: 'sortable-fallback',\n      fallbackOnBody: false,\n      fallbackTolerance: 0,\n      fallbackOffset: {\n        x: 0,\n        y: 0\n      },\n      supportPointer: Sortable.supportPointer !== false\n    }; // Set default options\n\n    for (var name in defaults) {\n      !(name in options) && (options[name] = defaults[name]);\n    }\n\n    _prepareGroup(options); // Bind all private methods\n\n\n    for (var fn in this) {\n      if (fn.charAt(0) === '_' && typeof this[fn] === 'function') {\n        this[fn] = this[fn].bind(this);\n      }\n    } // Setup drag mode\n\n\n    this.nativeDraggable = options.forceFallback ? false : supportDraggable; // Bind events\n\n    _on(el, 'mousedown', this._onTapStart);\n\n    _on(el, 'touchstart', this._onTapStart);\n\n    options.supportPointer && _on(el, 'pointerdown', this._onTapStart);\n\n    if (this.nativeDraggable) {\n      _on(el, 'dragover', this);\n\n      _on(el, 'dragenter', this);\n    }\n\n    touchDragOverListeners.push(this._onDragOver); // Restore sorting\n\n    options.store && this.sort(options.store.get(this));\n  }\n\n  Sortable.prototype =\n  /** @lends Sortable.prototype */\n  {\n    constructor: Sortable,\n    _onTapStart: function (\n    /** Event|TouchEvent */\n    evt) {\n      var _this = this,\n          el = this.el,\n          options = this.options,\n          preventOnFilter = options.preventOnFilter,\n          type = evt.type,\n          touch = evt.touches && evt.touches[0],\n          target = (touch || evt).target,\n          originalTarget = evt.target.shadowRoot && evt.path && evt.path[0] || target,\n          filter = options.filter,\n          startIndex;\n\n      _saveInputCheckedState(el); // Don't trigger start event when an element is been dragged, otherwise the evt.oldindex always wrong when set option.group.\n\n\n      if (dragEl) {\n        return;\n      }\n\n      if (/mousedown|pointerdown/.test(type) && evt.button !== 0 || options.disabled) {\n        return; // only left button or enabled\n      } // cancel dnd if original target is content editable\n\n\n      if (originalTarget.isContentEditable) {\n        return;\n      }\n\n      target = _closest(target, options.draggable, el);\n\n      if (!target) {\n        return;\n      }\n\n      if (lastDownEl === target) {\n        // Ignoring duplicate `down`\n        return;\n      } // Get the index of the dragged element within its parent\n\n\n      startIndex = _index(target, options.draggable); // Check filter\n\n      if (typeof filter === 'function') {\n        if (filter.call(this, evt, target, this)) {\n          _dispatchEvent(_this, originalTarget, 'filter', target, el, el, startIndex);\n\n          preventOnFilter && evt.preventDefault();\n          return; // cancel dnd\n        }\n      } else if (filter) {\n        filter = filter.split(',').some(function (criteria) {\n          criteria = _closest(originalTarget, criteria.trim(), el);\n\n          if (criteria) {\n            _dispatchEvent(_this, criteria, 'filter', target, el, el, startIndex);\n\n            return true;\n          }\n        });\n\n        if (filter) {\n          preventOnFilter && evt.preventDefault();\n          return; // cancel dnd\n        }\n      }\n\n      if (options.handle && !_closest(originalTarget, options.handle, el)) {\n        return;\n      } // Prepare `dragstart`\n\n\n      this._prepareDragStart(evt, touch, target, startIndex);\n    },\n    _prepareDragStart: function (\n    /** Event */\n    evt,\n    /** Touch */\n    touch,\n    /** HTMLElement */\n    target,\n    /** Number */\n    startIndex) {\n      var _this = this,\n          el = _this.el,\n          options = _this.options,\n          ownerDocument = el.ownerDocument,\n          dragStartFn;\n\n      if (target && !dragEl && target.parentNode === el) {\n        tapEvt = evt;\n        rootEl = el;\n        dragEl = target;\n        parentEl = dragEl.parentNode;\n        nextEl = dragEl.nextSibling;\n        lastDownEl = target;\n        activeGroup = options.group;\n        oldIndex = startIndex;\n        this._lastX = (touch || evt).clientX;\n        this._lastY = (touch || evt).clientY;\n        dragEl.style['will-change'] = 'all';\n\n        dragStartFn = function () {\n          // Delayed drag has been triggered\n          // we can re-enable the events: touchmove/mousemove\n          _this._disableDelayedDrag(); // Make the element draggable\n\n\n          dragEl.draggable = _this.nativeDraggable; // Chosen item\n\n          _toggleClass(dragEl, options.chosenClass, true); // Bind the events: dragstart/dragend\n\n\n          _this._triggerDragStart(evt, touch); // Drag start event\n\n\n          _dispatchEvent(_this, rootEl, 'choose', dragEl, rootEl, rootEl, oldIndex);\n        }; // Disable \"draggable\"\n\n\n        options.ignore.split(',').forEach(function (criteria) {\n          _find(dragEl, criteria.trim(), _disableDraggable);\n        });\n\n        _on(ownerDocument, 'mouseup', _this._onDrop);\n\n        _on(ownerDocument, 'touchend', _this._onDrop);\n\n        _on(ownerDocument, 'touchcancel', _this._onDrop);\n\n        _on(ownerDocument, 'selectstart', _this);\n\n        options.supportPointer && _on(ownerDocument, 'pointercancel', _this._onDrop);\n\n        if (options.delay) {\n          // If the user moves the pointer or let go the click or touch\n          // before the delay has been reached:\n          // disable the delayed drag\n          _on(ownerDocument, 'mouseup', _this._disableDelayedDrag);\n\n          _on(ownerDocument, 'touchend', _this._disableDelayedDrag);\n\n          _on(ownerDocument, 'touchcancel', _this._disableDelayedDrag);\n\n          _on(ownerDocument, 'mousemove', _this._disableDelayedDrag);\n\n          _on(ownerDocument, 'touchmove', _this._disableDelayedDrag);\n\n          options.supportPointer && _on(ownerDocument, 'pointermove', _this._disableDelayedDrag);\n          _this._dragStartTimer = setTimeout(dragStartFn, options.delay);\n        } else {\n          dragStartFn();\n        }\n      }\n    },\n    _disableDelayedDrag: function () {\n      var ownerDocument = this.el.ownerDocument;\n      clearTimeout(this._dragStartTimer);\n\n      _off(ownerDocument, 'mouseup', this._disableDelayedDrag);\n\n      _off(ownerDocument, 'touchend', this._disableDelayedDrag);\n\n      _off(ownerDocument, 'touchcancel', this._disableDelayedDrag);\n\n      _off(ownerDocument, 'mousemove', this._disableDelayedDrag);\n\n      _off(ownerDocument, 'touchmove', this._disableDelayedDrag);\n\n      _off(ownerDocument, 'pointermove', this._disableDelayedDrag);\n    },\n    _triggerDragStart: function (\n    /** Event */\n    evt,\n    /** Touch */\n    touch) {\n      touch = touch || (evt.pointerType == 'touch' ? evt : null);\n\n      if (touch) {\n        // Touch device support\n        tapEvt = {\n          target: dragEl,\n          clientX: touch.clientX,\n          clientY: touch.clientY\n        };\n\n        this._onDragStart(tapEvt, 'touch');\n      } else if (!this.nativeDraggable) {\n        this._onDragStart(tapEvt, true);\n      } else {\n        _on(dragEl, 'dragend', this);\n\n        _on(rootEl, 'dragstart', this._onDragStart);\n      }\n\n      try {\n        if (document.selection) {\n          // Timeout neccessary for IE9\n          _nextTick(function () {\n            document.selection.empty();\n          });\n        } else {\n          window.getSelection().removeAllRanges();\n        }\n      } catch (err) {}\n    },\n    _dragStarted: function () {\n      if (rootEl && dragEl) {\n        var options = this.options; // Apply effect\n\n        _toggleClass(dragEl, options.ghostClass, true);\n\n        _toggleClass(dragEl, options.dragClass, false);\n\n        Sortable.active = this; // Drag start event\n\n        _dispatchEvent(this, rootEl, 'start', dragEl, rootEl, rootEl, oldIndex);\n      } else {\n        this._nulling();\n      }\n    },\n    _emulateDragOver: function () {\n      if (touchEvt) {\n        if (this._lastX === touchEvt.clientX && this._lastY === touchEvt.clientY) {\n          return;\n        }\n\n        this._lastX = touchEvt.clientX;\n        this._lastY = touchEvt.clientY;\n\n        if (!supportCssPointerEvents) {\n          _css(ghostEl, 'display', 'none');\n        }\n\n        var target = document.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\n        var parent = target;\n        var i = touchDragOverListeners.length;\n\n        if (target && target.shadowRoot) {\n          target = target.shadowRoot.elementFromPoint(touchEvt.clientX, touchEvt.clientY);\n          parent = target;\n        }\n\n        if (parent) {\n          do {\n            if (parent[expando]) {\n              while (i--) {\n                touchDragOverListeners[i]({\n                  clientX: touchEvt.clientX,\n                  clientY: touchEvt.clientY,\n                  target: target,\n                  rootEl: parent\n                });\n              }\n\n              break;\n            }\n\n            target = parent; // store last element\n          }\n          /* jshint boss:true */\n          while (parent = parent.parentNode);\n        }\n\n        if (!supportCssPointerEvents) {\n          _css(ghostEl, 'display', '');\n        }\n      }\n    },\n    _onTouchMove: function (\n    /**TouchEvent*/\n    evt) {\n      if (tapEvt) {\n        var options = this.options,\n            fallbackTolerance = options.fallbackTolerance,\n            fallbackOffset = options.fallbackOffset,\n            touch = evt.touches ? evt.touches[0] : evt,\n            dx = touch.clientX - tapEvt.clientX + fallbackOffset.x,\n            dy = touch.clientY - tapEvt.clientY + fallbackOffset.y,\n            translate3d = evt.touches ? 'translate3d(' + dx + 'px,' + dy + 'px,0)' : 'translate(' + dx + 'px,' + dy + 'px)'; // only set the status to dragging, when we are actually dragging\n\n        if (!Sortable.active) {\n          if (fallbackTolerance && min(abs(touch.clientX - this._lastX), abs(touch.clientY - this._lastY)) < fallbackTolerance) {\n            return;\n          }\n\n          this._dragStarted();\n        } // as well as creating the ghost element on the document body\n\n\n        this._appendGhost();\n\n        moved = true;\n        touchEvt = touch;\n\n        _css(ghostEl, 'webkitTransform', translate3d);\n\n        _css(ghostEl, 'mozTransform', translate3d);\n\n        _css(ghostEl, 'msTransform', translate3d);\n\n        _css(ghostEl, 'transform', translate3d);\n\n        evt.preventDefault();\n      }\n    },\n    _appendGhost: function () {\n      if (!ghostEl) {\n        var rect = dragEl.getBoundingClientRect(),\n            css = _css(dragEl),\n            options = this.options,\n            ghostRect;\n\n        ghostEl = dragEl.cloneNode(true);\n\n        _toggleClass(ghostEl, options.ghostClass, false);\n\n        _toggleClass(ghostEl, options.fallbackClass, true);\n\n        _toggleClass(ghostEl, options.dragClass, true);\n\n        _css(ghostEl, 'top', rect.top - parseInt(css.marginTop, 10));\n\n        _css(ghostEl, 'left', rect.left - parseInt(css.marginLeft, 10));\n\n        _css(ghostEl, 'width', rect.width);\n\n        _css(ghostEl, 'height', rect.height);\n\n        _css(ghostEl, 'opacity', '0.8');\n\n        _css(ghostEl, 'position', 'fixed');\n\n        _css(ghostEl, 'zIndex', '100000');\n\n        _css(ghostEl, 'pointerEvents', 'none');\n\n        options.fallbackOnBody && document.body.appendChild(ghostEl) || rootEl.appendChild(ghostEl); // Fixing dimensions.\n\n        ghostRect = ghostEl.getBoundingClientRect();\n\n        _css(ghostEl, 'width', rect.width * 2 - ghostRect.width);\n\n        _css(ghostEl, 'height', rect.height * 2 - ghostRect.height);\n      }\n    },\n    _onDragStart: function (\n    /**Event*/\n    evt,\n    /**boolean*/\n    useFallback) {\n      var _this = this;\n\n      var dataTransfer = evt.dataTransfer;\n      var options = _this.options;\n\n      _this._offUpEvents();\n\n      if (activeGroup.checkPull(_this, _this, dragEl, evt)) {\n        cloneEl = _clone(dragEl);\n        cloneEl.draggable = false;\n        cloneEl.style['will-change'] = '';\n\n        _css(cloneEl, 'display', 'none');\n\n        _toggleClass(cloneEl, _this.options.chosenClass, false); // #1143: IFrame support workaround\n\n\n        _this._cloneId = _nextTick(function () {\n          rootEl.insertBefore(cloneEl, dragEl);\n\n          _dispatchEvent(_this, rootEl, 'clone', dragEl);\n        });\n      }\n\n      _toggleClass(dragEl, options.dragClass, true);\n\n      if (useFallback) {\n        if (useFallback === 'touch') {\n          // Bind touch events\n          _on(document, 'touchmove', _this._onTouchMove);\n\n          _on(document, 'touchend', _this._onDrop);\n\n          _on(document, 'touchcancel', _this._onDrop);\n\n          if (options.supportPointer) {\n            _on(document, 'pointermove', _this._onTouchMove);\n\n            _on(document, 'pointerup', _this._onDrop);\n          }\n        } else {\n          // Old brwoser\n          _on(document, 'mousemove', _this._onTouchMove);\n\n          _on(document, 'mouseup', _this._onDrop);\n        }\n\n        _this._loopId = setInterval(_this._emulateDragOver, 50);\n      } else {\n        if (dataTransfer) {\n          dataTransfer.effectAllowed = 'move';\n          options.setData && options.setData.call(_this, dataTransfer, dragEl);\n        }\n\n        _on(document, 'drop', _this); // #1143: Бывает элемент с IFrame внутри блокирует `drop`,\n        // поэтому если вызвался `mouseover`, значит надо отменять весь d'n'd.\n        // Breaking Chrome 62+\n        // _on(document, 'mouseover', _this);\n\n\n        _this._dragStartId = _nextTick(_this._dragStarted);\n      }\n    },\n    _onDragOver: function (\n    /**Event*/\n    evt) {\n      var el = this.el,\n          target,\n          dragRect,\n          targetRect,\n          revert,\n          options = this.options,\n          group = options.group,\n          activeSortable = Sortable.active,\n          isOwner = activeGroup === group,\n          isMovingBetweenSortable = false,\n          canSort = options.sort;\n\n      if (evt.preventDefault !== void 0) {\n        evt.preventDefault();\n        !options.dragoverBubble && evt.stopPropagation();\n      }\n\n      if (dragEl.animated) {\n        return;\n      }\n\n      moved = true;\n\n      if (activeSortable && !options.disabled && (isOwner ? canSort || (revert = !rootEl.contains(dragEl)) // Reverting item into the original list\n      : putSortable === this || (activeSortable.lastPullMode = activeGroup.checkPull(this, activeSortable, dragEl, evt)) && group.checkPut(this, activeSortable, dragEl, evt)) && (evt.rootEl === void 0 || evt.rootEl === this.el) // touch fallback\n      ) {\n          // Smart auto-scrolling\n          _autoScroll(evt, options, this.el);\n\n          if (_silent) {\n            return;\n          }\n\n          target = _closest(evt.target, options.draggable, el);\n          dragRect = dragEl.getBoundingClientRect();\n\n          if (putSortable !== this) {\n            putSortable = this;\n            isMovingBetweenSortable = true;\n          }\n\n          if (revert) {\n            _cloneHide(activeSortable, true);\n\n            parentEl = rootEl; // actualization\n\n            if (cloneEl || nextEl) {\n              rootEl.insertBefore(dragEl, cloneEl || nextEl);\n            } else if (!canSort) {\n              rootEl.appendChild(dragEl);\n            }\n\n            return;\n          }\n\n          if (el.children.length === 0 || el.children[0] === ghostEl || el === evt.target && _ghostIsLast(el, evt)) {\n            //assign target only if condition is true\n            if (el.children.length !== 0 && el.children[0] !== ghostEl && el === evt.target) {\n              target = el.lastElementChild;\n            }\n\n            if (target) {\n              if (target.animated) {\n                return;\n              }\n\n              targetRect = target.getBoundingClientRect();\n            }\n\n            _cloneHide(activeSortable, isOwner);\n\n            if (_onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt) !== false) {\n              if (!dragEl.contains(el)) {\n                el.appendChild(dragEl);\n                parentEl = el; // actualization\n              }\n\n              this._animate(dragRect, dragEl);\n\n              target && this._animate(targetRect, target);\n            }\n          } else if (target && !target.animated && target !== dragEl && target.parentNode[expando] !== void 0) {\n            if (lastEl !== target) {\n              lastEl = target;\n              lastCSS = _css(target);\n              lastParentCSS = _css(target.parentNode);\n            }\n\n            targetRect = target.getBoundingClientRect();\n            var width = targetRect.right - targetRect.left,\n                height = targetRect.bottom - targetRect.top,\n                floating = R_FLOAT.test(lastCSS.cssFloat + lastCSS.display) || lastParentCSS.display == 'flex' && lastParentCSS['flex-direction'].indexOf('row') === 0,\n                isWide = target.offsetWidth > dragEl.offsetWidth,\n                isLong = target.offsetHeight > dragEl.offsetHeight,\n                halfway = (floating ? (evt.clientX - targetRect.left) / width : (evt.clientY - targetRect.top) / height) > 0.5,\n                nextSibling = target.nextElementSibling,\n                after = false;\n\n            if (floating) {\n              var elTop = dragEl.offsetTop,\n                  tgTop = target.offsetTop;\n\n              if (elTop === tgTop) {\n                after = target.previousElementSibling === dragEl && !isWide || halfway && isWide;\n              } else if (target.previousElementSibling === dragEl || dragEl.previousElementSibling === target) {\n                after = (evt.clientY - targetRect.top) / height > 0.5;\n              } else {\n                after = tgTop > elTop;\n              }\n            } else if (!isMovingBetweenSortable) {\n              after = nextSibling !== dragEl && !isLong || halfway && isLong;\n            }\n\n            var moveVector = _onMove(rootEl, el, dragEl, dragRect, target, targetRect, evt, after);\n\n            if (moveVector !== false) {\n              if (moveVector === 1 || moveVector === -1) {\n                after = moveVector === 1;\n              }\n\n              _silent = true;\n              setTimeout(_unsilent, 30);\n\n              _cloneHide(activeSortable, isOwner);\n\n              if (!dragEl.contains(el)) {\n                if (after && !nextSibling) {\n                  el.appendChild(dragEl);\n                } else {\n                  target.parentNode.insertBefore(dragEl, after ? nextSibling : target);\n                }\n              }\n\n              parentEl = dragEl.parentNode; // actualization\n\n              this._animate(dragRect, dragEl);\n\n              this._animate(targetRect, target);\n            }\n          }\n        }\n    },\n    _animate: function (prevRect, target) {\n      var ms = this.options.animation;\n\n      if (ms) {\n        var currentRect = target.getBoundingClientRect();\n\n        if (prevRect.nodeType === 1) {\n          prevRect = prevRect.getBoundingClientRect();\n        }\n\n        _css(target, 'transition', 'none');\n\n        _css(target, 'transform', 'translate3d(' + (prevRect.left - currentRect.left) + 'px,' + (prevRect.top - currentRect.top) + 'px,0)');\n\n        target.offsetWidth; // repaint\n\n        _css(target, 'transition', 'all ' + ms + 'ms');\n\n        _css(target, 'transform', 'translate3d(0,0,0)');\n\n        clearTimeout(target.animated);\n        target.animated = setTimeout(function () {\n          _css(target, 'transition', '');\n\n          _css(target, 'transform', '');\n\n          target.animated = false;\n        }, ms);\n      }\n    },\n    _offUpEvents: function () {\n      var ownerDocument = this.el.ownerDocument;\n\n      _off(document, 'touchmove', this._onTouchMove);\n\n      _off(document, 'pointermove', this._onTouchMove);\n\n      _off(ownerDocument, 'mouseup', this._onDrop);\n\n      _off(ownerDocument, 'touchend', this._onDrop);\n\n      _off(ownerDocument, 'pointerup', this._onDrop);\n\n      _off(ownerDocument, 'touchcancel', this._onDrop);\n\n      _off(ownerDocument, 'pointercancel', this._onDrop);\n\n      _off(ownerDocument, 'selectstart', this);\n    },\n    _onDrop: function (\n    /**Event*/\n    evt) {\n      var el = this.el,\n          options = this.options;\n      clearInterval(this._loopId);\n      clearInterval(autoScroll.pid);\n      clearTimeout(this._dragStartTimer);\n\n      _cancelNextTick(this._cloneId);\n\n      _cancelNextTick(this._dragStartId); // Unbind events\n\n\n      _off(document, 'mouseover', this);\n\n      _off(document, 'mousemove', this._onTouchMove);\n\n      if (this.nativeDraggable) {\n        _off(document, 'drop', this);\n\n        _off(el, 'dragstart', this._onDragStart);\n      }\n\n      this._offUpEvents();\n\n      if (evt) {\n        if (moved) {\n          evt.preventDefault();\n          !options.dropBubble && evt.stopPropagation();\n        }\n\n        ghostEl && ghostEl.parentNode && ghostEl.parentNode.removeChild(ghostEl);\n\n        if (rootEl === parentEl || Sortable.active.lastPullMode !== 'clone') {\n          // Remove clone\n          cloneEl && cloneEl.parentNode && cloneEl.parentNode.removeChild(cloneEl);\n        }\n\n        if (dragEl) {\n          if (this.nativeDraggable) {\n            _off(dragEl, 'dragend', this);\n          }\n\n          _disableDraggable(dragEl);\n\n          dragEl.style['will-change'] = ''; // Remove class's\n\n          _toggleClass(dragEl, this.options.ghostClass, false);\n\n          _toggleClass(dragEl, this.options.chosenClass, false); // Drag stop event\n\n\n          _dispatchEvent(this, rootEl, 'unchoose', dragEl, parentEl, rootEl, oldIndex);\n\n          if (rootEl !== parentEl) {\n            newIndex = _index(dragEl, options.draggable);\n\n            if (newIndex >= 0) {\n              // Add event\n              _dispatchEvent(null, parentEl, 'add', dragEl, parentEl, rootEl, oldIndex, newIndex); // Remove event\n\n\n              _dispatchEvent(this, rootEl, 'remove', dragEl, parentEl, rootEl, oldIndex, newIndex); // drag from one list and drop into another\n\n\n              _dispatchEvent(null, parentEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex);\n\n              _dispatchEvent(this, rootEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex);\n            }\n          } else {\n            if (dragEl.nextSibling !== nextEl) {\n              // Get the index of the dragged element within its parent\n              newIndex = _index(dragEl, options.draggable);\n\n              if (newIndex >= 0) {\n                // drag & drop within the same list\n                _dispatchEvent(this, rootEl, 'update', dragEl, parentEl, rootEl, oldIndex, newIndex);\n\n                _dispatchEvent(this, rootEl, 'sort', dragEl, parentEl, rootEl, oldIndex, newIndex);\n              }\n            }\n          }\n\n          if (Sortable.active) {\n            /* jshint eqnull:true */\n            if (newIndex == null || newIndex === -1) {\n              newIndex = oldIndex;\n            }\n\n            _dispatchEvent(this, rootEl, 'end', dragEl, parentEl, rootEl, oldIndex, newIndex); // Save sorting\n\n\n            this.save();\n          }\n        }\n      }\n\n      this._nulling();\n    },\n    _nulling: function () {\n      rootEl = dragEl = parentEl = ghostEl = nextEl = cloneEl = lastDownEl = scrollEl = scrollParentEl = tapEvt = touchEvt = moved = newIndex = lastEl = lastCSS = putSortable = activeGroup = Sortable.active = null;\n      savedInputChecked.forEach(function (el) {\n        el.checked = true;\n      });\n      savedInputChecked.length = 0;\n    },\n    handleEvent: function (\n    /**Event*/\n    evt) {\n      switch (evt.type) {\n        case 'drop':\n        case 'dragend':\n          this._onDrop(evt);\n\n          break;\n\n        case 'dragover':\n        case 'dragenter':\n          if (dragEl) {\n            this._onDragOver(evt);\n\n            _globalDragOver(evt);\n          }\n\n          break;\n\n        case 'mouseover':\n          this._onDrop(evt);\n\n          break;\n\n        case 'selectstart':\n          evt.preventDefault();\n          break;\n      }\n    },\n\n    /**\n     * Serializes the item into an array of string.\n     * @returns {String[]}\n     */\n    toArray: function () {\n      var order = [],\n          el,\n          children = this.el.children,\n          i = 0,\n          n = children.length,\n          options = this.options;\n\n      for (; i < n; i++) {\n        el = children[i];\n\n        if (_closest(el, options.draggable, this.el)) {\n          order.push(el.getAttribute(options.dataIdAttr) || _generateId(el));\n        }\n      }\n\n      return order;\n    },\n\n    /**\n     * Sorts the elements according to the array.\n     * @param  {String[]}  order  order of the items\n     */\n    sort: function (order) {\n      var items = {},\n          rootEl = this.el;\n      this.toArray().forEach(function (id, i) {\n        var el = rootEl.children[i];\n\n        if (_closest(el, this.options.draggable, rootEl)) {\n          items[id] = el;\n        }\n      }, this);\n      order.forEach(function (id) {\n        if (items[id]) {\n          rootEl.removeChild(items[id]);\n          rootEl.appendChild(items[id]);\n        }\n      });\n    },\n\n    /**\n     * Save the current sorting\n     */\n    save: function () {\n      var store = this.options.store;\n      store && store.set(this);\n    },\n\n    /**\n     * For each element in the set, get the first element that matches the selector by testing the element itself and traversing up through its ancestors in the DOM tree.\n     * @param   {HTMLElement}  el\n     * @param   {String}       [selector]  default: `options.draggable`\n     * @returns {HTMLElement|null}\n     */\n    closest: function (el, selector) {\n      return _closest(el, selector || this.options.draggable, this.el);\n    },\n\n    /**\n     * Set/get option\n     * @param   {string} name\n     * @param   {*}      [value]\n     * @returns {*}\n     */\n    option: function (name, value) {\n      var options = this.options;\n\n      if (value === void 0) {\n        return options[name];\n      } else {\n        options[name] = value;\n\n        if (name === 'group') {\n          _prepareGroup(options);\n        }\n      }\n    },\n\n    /**\n     * Destroy\n     */\n    destroy: function () {\n      var el = this.el;\n      el[expando] = null;\n\n      _off(el, 'mousedown', this._onTapStart);\n\n      _off(el, 'touchstart', this._onTapStart);\n\n      _off(el, 'pointerdown', this._onTapStart);\n\n      if (this.nativeDraggable) {\n        _off(el, 'dragover', this);\n\n        _off(el, 'dragenter', this);\n      } // Remove draggable attributes\n\n\n      Array.prototype.forEach.call(el.querySelectorAll('[draggable]'), function (el) {\n        el.removeAttribute('draggable');\n      });\n      touchDragOverListeners.splice(touchDragOverListeners.indexOf(this._onDragOver), 1);\n\n      this._onDrop();\n\n      this.el = el = null;\n    }\n  };\n\n  function _cloneHide(sortable, state) {\n    if (sortable.lastPullMode !== 'clone') {\n      state = true;\n    }\n\n    if (cloneEl && cloneEl.state !== state) {\n      _css(cloneEl, 'display', state ? 'none' : '');\n\n      if (!state) {\n        if (cloneEl.state) {\n          if (sortable.options.group.revertClone) {\n            rootEl.insertBefore(cloneEl, nextEl);\n\n            sortable._animate(dragEl, cloneEl);\n          } else {\n            rootEl.insertBefore(cloneEl, dragEl);\n          }\n        }\n      }\n\n      cloneEl.state = state;\n    }\n  }\n\n  function _closest(\n  /**HTMLElement*/\n  el,\n  /**String*/\n  selector,\n  /**HTMLElement*/\n  ctx) {\n    if (el) {\n      ctx = ctx || document;\n\n      do {\n        if (selector === '>*' && el.parentNode === ctx || _matches(el, selector)) {\n          return el;\n        }\n        /* jshint boss:true */\n\n      } while (el = _getParentOrHost(el));\n    }\n\n    return null;\n  }\n\n  function _getParentOrHost(el) {\n    var parent = el.host;\n    return parent && parent.nodeType ? parent : el.parentNode;\n  }\n\n  function _globalDragOver(\n  /**Event*/\n  evt) {\n    if (evt.dataTransfer) {\n      evt.dataTransfer.dropEffect = 'move';\n    }\n\n    evt.preventDefault();\n  }\n\n  function _on(el, event, fn) {\n    el.addEventListener(event, fn, captureMode);\n  }\n\n  function _off(el, event, fn) {\n    el.removeEventListener(event, fn, captureMode);\n  }\n\n  function _toggleClass(el, name, state) {\n    if (el) {\n      if (el.classList) {\n        el.classList[state ? 'add' : 'remove'](name);\n      } else {\n        var className = (' ' + el.className + ' ').replace(R_SPACE, ' ').replace(' ' + name + ' ', ' ');\n        el.className = (className + (state ? ' ' + name : '')).replace(R_SPACE, ' ');\n      }\n    }\n  }\n\n  function _css(el, prop, val) {\n    var style = el && el.style;\n\n    if (style) {\n      if (val === void 0) {\n        if (document.defaultView && document.defaultView.getComputedStyle) {\n          val = document.defaultView.getComputedStyle(el, '');\n        } else if (el.currentStyle) {\n          val = el.currentStyle;\n        }\n\n        return prop === void 0 ? val : val[prop];\n      } else {\n        if (!(prop in style)) {\n          prop = '-webkit-' + prop;\n        }\n\n        style[prop] = val + (typeof val === 'string' ? '' : 'px');\n      }\n    }\n  }\n\n  function _find(ctx, tagName, iterator) {\n    if (ctx) {\n      var list = ctx.getElementsByTagName(tagName),\n          i = 0,\n          n = list.length;\n\n      if (iterator) {\n        for (; i < n; i++) {\n          iterator(list[i], i);\n        }\n      }\n\n      return list;\n    }\n\n    return [];\n  }\n\n  function _dispatchEvent(sortable, rootEl, name, targetEl, toEl, fromEl, startIndex, newIndex) {\n    sortable = sortable || rootEl[expando];\n    var evt = document.createEvent('Event'),\n        options = sortable.options,\n        onName = 'on' + name.charAt(0).toUpperCase() + name.substr(1);\n    evt.initEvent(name, true, true);\n    evt.to = toEl || rootEl;\n    evt.from = fromEl || rootEl;\n    evt.item = targetEl || rootEl;\n    evt.clone = cloneEl;\n    evt.oldIndex = startIndex;\n    evt.newIndex = newIndex;\n    rootEl.dispatchEvent(evt);\n\n    if (options[onName]) {\n      options[onName].call(sortable, evt);\n    }\n  }\n\n  function _onMove(fromEl, toEl, dragEl, dragRect, targetEl, targetRect, originalEvt, willInsertAfter) {\n    var evt,\n        sortable = fromEl[expando],\n        onMoveFn = sortable.options.onMove,\n        retVal;\n    evt = document.createEvent('Event');\n    evt.initEvent('move', true, true);\n    evt.to = toEl;\n    evt.from = fromEl;\n    evt.dragged = dragEl;\n    evt.draggedRect = dragRect;\n    evt.related = targetEl || toEl;\n    evt.relatedRect = targetRect || toEl.getBoundingClientRect();\n    evt.willInsertAfter = willInsertAfter;\n    fromEl.dispatchEvent(evt);\n\n    if (onMoveFn) {\n      retVal = onMoveFn.call(sortable, evt, originalEvt);\n    }\n\n    return retVal;\n  }\n\n  function _disableDraggable(el) {\n    el.draggable = false;\n  }\n\n  function _unsilent() {\n    _silent = false;\n  }\n  /** @returns {HTMLElement|false} */\n\n\n  function _ghostIsLast(el, evt) {\n    var lastEl = el.lastElementChild,\n        rect = lastEl.getBoundingClientRect(); // 5 — min delta\n    // abs — нельзя добавлять, а то глюки при наведении сверху\n\n    return evt.clientY - (rect.top + rect.height) > 5 || evt.clientX - (rect.left + rect.width) > 5;\n  }\n  /**\n   * Generate id\n   * @param   {HTMLElement} el\n   * @returns {String}\n   * @private\n   */\n\n\n  function _generateId(el) {\n    var str = el.tagName + el.className + el.src + el.href + el.textContent,\n        i = str.length,\n        sum = 0;\n\n    while (i--) {\n      sum += str.charCodeAt(i);\n    }\n\n    return sum.toString(36);\n  }\n  /**\n   * Returns the index of an element within its parent for a selected set of\n   * elements\n   * @param  {HTMLElement} el\n   * @param  {selector} selector\n   * @return {number}\n   */\n\n\n  function _index(el, selector) {\n    var index = 0;\n\n    if (!el || !el.parentNode) {\n      return -1;\n    }\n\n    while (el && (el = el.previousElementSibling)) {\n      if (el.nodeName.toUpperCase() !== 'TEMPLATE' && (selector === '>*' || _matches(el, selector))) {\n        index++;\n      }\n    }\n\n    return index;\n  }\n\n  function _matches(\n  /**HTMLElement*/\n  el,\n  /**String*/\n  selector) {\n    if (el) {\n      selector = selector.split('.');\n      var tag = selector.shift().toUpperCase(),\n          re = new RegExp('\\\\s(' + selector.join('|') + ')(?=\\\\s)', 'g');\n      return (tag === '' || el.nodeName.toUpperCase() == tag) && (!selector.length || ((' ' + el.className + ' ').match(re) || []).length == selector.length);\n    }\n\n    return false;\n  }\n\n  function _throttle(callback, ms) {\n    var args, _this;\n\n    return function () {\n      if (args === void 0) {\n        args = arguments;\n        _this = this;\n        setTimeout(function () {\n          if (args.length === 1) {\n            callback.call(_this, args[0]);\n          } else {\n            callback.apply(_this, args);\n          }\n\n          args = void 0;\n        }, ms);\n      }\n    };\n  }\n\n  function _extend(dst, src) {\n    if (dst && src) {\n      for (var key in src) {\n        if (src.hasOwnProperty(key)) {\n          dst[key] = src[key];\n        }\n      }\n    }\n\n    return dst;\n  }\n\n  function _clone(el) {\n    if (Polymer && Polymer.dom) {\n      return Polymer.dom(el).cloneNode(true);\n    } else if ($) {\n      return $(el).clone(true)[0];\n    } else {\n      return el.cloneNode(true);\n    }\n  }\n\n  function _saveInputCheckedState(root) {\n    var inputs = root.getElementsByTagName('input');\n    var idx = inputs.length;\n\n    while (idx--) {\n      var el = inputs[idx];\n      el.checked && savedInputChecked.push(el);\n    }\n  }\n\n  function _nextTick(fn) {\n    return setTimeout(fn, 0);\n  }\n\n  function _cancelNextTick(id) {\n    return clearTimeout(id);\n  } // Fixed #973:\n\n\n  _on(document, 'touchmove', function (evt) {\n    if (Sortable.active) {\n      evt.preventDefault();\n    }\n  }); // Export utils\n\n\n  Sortable.utils = {\n    on: _on,\n    off: _off,\n    css: _css,\n    find: _find,\n    is: function (el, selector) {\n      return !!_closest(el, selector, el);\n    },\n    extend: _extend,\n    throttle: _throttle,\n    closest: _closest,\n    toggleClass: _toggleClass,\n    clone: _clone,\n    index: _index,\n    nextTick: _nextTick,\n    cancelNextTick: _cancelNextTick\n  };\n  /**\n   * Create sortable instance\n   * @param {HTMLElement}  el\n   * @param {Object}      [options]\n   */\n\n  Sortable.create = function (el, options) {\n    return new Sortable(el, options);\n  }; // Export\n\n\n  Sortable.version = '1.7.0';\n  return Sortable;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///1\n")},function(module,exports,__webpack_require__){eval("\nvar content = __webpack_require__(0);\n\nif(typeof content === 'string') content = [[module.i, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = __webpack_require__(4)(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(true) {\n\tmodule.hot.accept(0, function() {\n\t\tvar newContent = __webpack_require__(0);\n\n\t\tif(typeof newContent === 'string') newContent = [[module.i, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvYXBwLnNjc3M/OTRhYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLENBQTRGOztBQUVsSCw0Q0FBNEMsUUFBUzs7QUFFckQ7QUFDQTs7OztBQUlBLGVBQWU7O0FBRWY7QUFDQTs7QUFFQSxhQUFhLG1CQUFPLENBQUMsQ0FBZ0Q7O0FBRXJFOztBQUVBLEdBQUcsSUFBVTtBQUNiLG1CQUFtQixDQUE0RjtBQUMvRyxtQkFBbUIsbUJBQU8sQ0FBQyxDQUE0Rjs7QUFFdkgsb0RBQW9ELFFBQVM7O0FBRTdEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxHQUFHOztBQUVIOztBQUVBO0FBQ0EsRUFBRTs7QUFFRixnQ0FBZ0MsVUFBVSxFQUFFO0FBQzVDIiwiZmlsZSI6IjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9hcHAuc2Nzc1wiKTtcblxuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cbnZhciB0cmFuc2Zvcm07XG52YXIgaW5zZXJ0SW50bztcblxuXG5cbnZhciBvcHRpb25zID0ge1wiaG1yXCI6dHJ1ZX1cblxub3B0aW9ucy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm1cbm9wdGlvbnMuaW5zZXJ0SW50byA9IHVuZGVmaW5lZDtcblxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2FscztcblxuaWYobW9kdWxlLmhvdCkge1xuXHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9hcHAuc2Nzc1wiLCBmdW5jdGlvbigpIHtcblx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vYXBwLnNjc3NcIik7XG5cblx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblxuXHRcdHZhciBsb2NhbHMgPSAoZnVuY3Rpb24oYSwgYikge1xuXHRcdFx0dmFyIGtleSwgaWR4ID0gMDtcblxuXHRcdFx0Zm9yKGtleSBpbiBhKSB7XG5cdFx0XHRcdGlmKCFiIHx8IGFba2V5XSAhPT0gYltrZXldKSByZXR1cm4gZmFsc2U7XG5cdFx0XHRcdGlkeCsrO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3Ioa2V5IGluIGIpIGlkeC0tO1xuXG5cdFx0XHRyZXR1cm4gaWR4ID09PSAwO1xuXHRcdH0oY29udGVudC5sb2NhbHMsIG5ld0NvbnRlbnQubG9jYWxzKSk7XG5cblx0XHRpZighbG9jYWxzKSB0aHJvdyBuZXcgRXJyb3IoJ0Fib3J0aW5nIENTUyBITVIgZHVlIHRvIGNoYW5nZWQgY3NzLW1vZHVsZXMgbG9jYWxzLicpO1xuXG5cdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHR9KTtcblxuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn0iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n")},function(module,exports){eval('/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return "@media " + item[2] + "{" + content + "}";\n      } else {\n        return content;\n      }\n    }).join("");\n  }; // import a list of modules into the list\n\n\n  list.i = function (modules, mediaQuery) {\n    if (typeof modules === "string") modules = [[null, modules, ""]];\n    var alreadyImportedModules = {};\n\n    for (var i = 0; i < this.length; i++) {\n      var id = this[i][0];\n      if (typeof id === "number") alreadyImportedModules[id] = true;\n    }\n\n    for (i = 0; i < modules.length; i++) {\n      var item = modules[i]; // skip already imported module\n      // this implementation is not 100% perfect for weird media query combinations\n      //  when a module is imported multiple times with different media queries.\n      //  I hope this will never occur (Hey this way we have smaller bundles)\n\n      if (typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {\n        if (mediaQuery && !item[2]) {\n          item[2] = mediaQuery;\n        } else if (mediaQuery) {\n          item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";\n        }\n\n        list.push(item);\n      }\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || \'\';\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === \'function\') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return \'/*# sourceURL=\' + cssMapping.sourceRoot + source + \' */\';\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join(\'\\n\');\n  }\n\n  return [content].join(\'\\n\');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = \'sourceMappingURL=data:application/json;charset=utf-8;base64,\' + base64;\n  return \'/*# \' + data + \' */\';\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanM/MjM1MCJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwidXNlU291cmNlTWFwIiwibGlzdCIsInRvU3RyaW5nIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsZW5ndGgiLCJpZCIsInB1c2giLCJjc3NNYXBwaW5nIiwiYnRvYSIsInNvdXJjZU1hcHBpbmciLCJ0b0NvbW1lbnQiLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJjb25jYXQiLCJzb3VyY2VNYXAiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIl0sIm1hcHBpbmdzIjoiQUFBQTs7OztBQUlBO0FBQ0FBLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixVQUFTQyxZQUFULEVBQXVCO0FBQ3ZDLE1BQUlDLElBQUksR0FBRyxFQUFYLENBRHVDLENBR3ZDOztBQUNBQSxNQUFJLENBQUNDLFFBQUwsR0FBZ0IsU0FBU0EsUUFBVCxHQUFvQjtBQUNuQyxXQUFPLEtBQUtDLEdBQUwsQ0FBUyxVQUFVQyxJQUFWLEVBQWdCO0FBQy9CLFVBQUlDLE9BQU8sR0FBR0Msc0JBQXNCLENBQUNGLElBQUQsRUFBT0osWUFBUCxDQUFwQzs7QUFDQSxVQUFHSSxJQUFJLENBQUMsQ0FBRCxDQUFQLEVBQVk7QUFDWCxlQUFPLFlBQVlBLElBQUksQ0FBQyxDQUFELENBQWhCLEdBQXNCLEdBQXRCLEdBQTRCQyxPQUE1QixHQUFzQyxHQUE3QztBQUNBLE9BRkQsTUFFTztBQUNOLGVBQU9BLE9BQVA7QUFDQTtBQUNELEtBUE0sRUFPSkUsSUFQSSxDQU9DLEVBUEQsQ0FBUDtBQVFBLEdBVEQsQ0FKdUMsQ0FldkM7OztBQUNBTixNQUFJLENBQUNPLENBQUwsR0FBUyxVQUFTQyxPQUFULEVBQWtCQyxVQUFsQixFQUE4QjtBQUN0QyxRQUFHLE9BQU9ELE9BQVAsS0FBbUIsUUFBdEIsRUFDQ0EsT0FBTyxHQUFHLENBQUMsQ0FBQyxJQUFELEVBQU9BLE9BQVAsRUFBZ0IsRUFBaEIsQ0FBRCxDQUFWO0FBQ0QsUUFBSUUsc0JBQXNCLEdBQUcsRUFBN0I7O0FBQ0EsU0FBSSxJQUFJSCxDQUFDLEdBQUcsQ0FBWixFQUFlQSxDQUFDLEdBQUcsS0FBS0ksTUFBeEIsRUFBZ0NKLENBQUMsRUFBakMsRUFBcUM7QUFDcEMsVUFBSUssRUFBRSxHQUFHLEtBQUtMLENBQUwsRUFBUSxDQUFSLENBQVQ7QUFDQSxVQUFHLE9BQU9LLEVBQVAsS0FBYyxRQUFqQixFQUNDRixzQkFBc0IsQ0FBQ0UsRUFBRCxDQUF0QixHQUE2QixJQUE3QjtBQUNEOztBQUNELFNBQUlMLENBQUMsR0FBRyxDQUFSLEVBQVdBLENBQUMsR0FBR0MsT0FBTyxDQUFDRyxNQUF2QixFQUErQkosQ0FBQyxFQUFoQyxFQUFvQztBQUNuQyxVQUFJSixJQUFJLEdBQUdLLE9BQU8sQ0FBQ0QsQ0FBRCxDQUFsQixDQURtQyxDQUVuQztBQUNBO0FBQ0E7QUFDQTs7QUFDQSxVQUFHLE9BQU9KLElBQUksQ0FBQyxDQUFELENBQVgsS0FBbUIsUUFBbkIsSUFBK0IsQ0FBQ08sc0JBQXNCLENBQUNQLElBQUksQ0FBQyxDQUFELENBQUwsQ0FBekQsRUFBb0U7QUFDbkUsWUFBR00sVUFBVSxJQUFJLENBQUNOLElBQUksQ0FBQyxDQUFELENBQXRCLEVBQTJCO0FBQzFCQSxjQUFJLENBQUMsQ0FBRCxDQUFKLEdBQVVNLFVBQVY7QUFDQSxTQUZELE1BRU8sSUFBR0EsVUFBSCxFQUFlO0FBQ3JCTixjQUFJLENBQUMsQ0FBRCxDQUFKLEdBQVUsTUFBTUEsSUFBSSxDQUFDLENBQUQsQ0FBVixHQUFnQixTQUFoQixHQUE0Qk0sVUFBNUIsR0FBeUMsR0FBbkQ7QUFDQTs7QUFDRFQsWUFBSSxDQUFDYSxJQUFMLENBQVVWLElBQVY7QUFDQTtBQUNEO0FBQ0QsR0F4QkQ7O0FBeUJBLFNBQU9ILElBQVA7QUFDQSxDQTFDRDs7QUE0Q0EsU0FBU0ssc0JBQVQsQ0FBZ0NGLElBQWhDLEVBQXNDSixZQUF0QyxFQUFvRDtBQUNuRCxNQUFJSyxPQUFPLEdBQUdELElBQUksQ0FBQyxDQUFELENBQUosSUFBVyxFQUF6QjtBQUNBLE1BQUlXLFVBQVUsR0FBR1gsSUFBSSxDQUFDLENBQUQsQ0FBckI7O0FBQ0EsTUFBSSxDQUFDVyxVQUFMLEVBQWlCO0FBQ2hCLFdBQU9WLE9BQVA7QUFDQTs7QUFFRCxNQUFJTCxZQUFZLElBQUksT0FBT2dCLElBQVAsS0FBZ0IsVUFBcEMsRUFBZ0Q7QUFDL0MsUUFBSUMsYUFBYSxHQUFHQyxTQUFTLENBQUNILFVBQUQsQ0FBN0I7QUFDQSxRQUFJSSxVQUFVLEdBQUdKLFVBQVUsQ0FBQ0ssT0FBWCxDQUFtQmpCLEdBQW5CLENBQXVCLFVBQVVrQixNQUFWLEVBQWtCO0FBQ3pELGFBQU8sbUJBQW1CTixVQUFVLENBQUNPLFVBQTlCLEdBQTJDRCxNQUEzQyxHQUFvRCxLQUEzRDtBQUNBLEtBRmdCLENBQWpCO0FBSUEsV0FBTyxDQUFDaEIsT0FBRCxFQUFVa0IsTUFBVixDQUFpQkosVUFBakIsRUFBNkJJLE1BQTdCLENBQW9DLENBQUNOLGFBQUQsQ0FBcEMsRUFBcURWLElBQXJELENBQTBELElBQTFELENBQVA7QUFDQTs7QUFFRCxTQUFPLENBQUNGLE9BQUQsRUFBVUUsSUFBVixDQUFlLElBQWYsQ0FBUDtBQUNBLEMsQ0FFRDs7O0FBQ0EsU0FBU1csU0FBVCxDQUFtQk0sU0FBbkIsRUFBOEI7QUFDN0I7QUFDQSxNQUFJQyxNQUFNLEdBQUdULElBQUksQ0FBQ1UsUUFBUSxDQUFDQyxrQkFBa0IsQ0FBQ0MsSUFBSSxDQUFDQyxTQUFMLENBQWVMLFNBQWYsQ0FBRCxDQUFuQixDQUFULENBQWpCO0FBQ0EsTUFBSU0sSUFBSSxHQUFHLGlFQUFpRUwsTUFBNUU7QUFFQSxTQUFPLFNBQVNLLElBQVQsR0FBZ0IsS0FBdkI7QUFDQSIsImZpbGUiOiIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypcblx0TUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcblx0QXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHVzZVNvdXJjZU1hcCkge1xuXHR2YXIgbGlzdCA9IFtdO1xuXG5cdC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblx0bGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuXHRcdFx0dmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCk7XG5cdFx0XHRpZihpdGVtWzJdKSB7XG5cdFx0XHRcdHJldHVybiBcIkBtZWRpYSBcIiArIGl0ZW1bMl0gKyBcIntcIiArIGNvbnRlbnQgKyBcIn1cIjtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHJldHVybiBjb250ZW50O1xuXHRcdFx0fVxuXHRcdH0pLmpvaW4oXCJcIik7XG5cdH07XG5cblx0Ly8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3Rcblx0bGlzdC5pID0gZnVuY3Rpb24obW9kdWxlcywgbWVkaWFRdWVyeSkge1xuXHRcdGlmKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKVxuXHRcdFx0bW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuXHRcdHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cdFx0Zm9yKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBpZCA9IHRoaXNbaV1bMF07XG5cdFx0XHRpZih0eXBlb2YgaWQgPT09IFwibnVtYmVyXCIpXG5cdFx0XHRcdGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcblx0XHR9XG5cdFx0Zm9yKGkgPSAwOyBpIDwgbW9kdWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBtb2R1bGVzW2ldO1xuXHRcdFx0Ly8gc2tpcCBhbHJlYWR5IGltcG9ydGVkIG1vZHVsZVxuXHRcdFx0Ly8gdGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBub3QgMTAwJSBwZXJmZWN0IGZvciB3ZWlyZCBtZWRpYSBxdWVyeSBjb21iaW5hdGlvbnNcblx0XHRcdC8vICB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG5cdFx0XHQvLyAgSSBob3BlIHRoaXMgd2lsbCBuZXZlciBvY2N1ciAoSGV5IHRoaXMgd2F5IHdlIGhhdmUgc21hbGxlciBidW5kbGVzKVxuXHRcdFx0aWYodHlwZW9mIGl0ZW1bMF0gIT09IFwibnVtYmVyXCIgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcblx0XHRcdFx0aWYobWVkaWFRdWVyeSAmJiAhaXRlbVsyXSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuXHRcdFx0XHR9IGVsc2UgaWYobWVkaWFRdWVyeSkge1xuXHRcdFx0XHRcdGl0ZW1bMl0gPSBcIihcIiArIGl0ZW1bMl0gKyBcIikgYW5kIChcIiArIG1lZGlhUXVlcnkgKyBcIilcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRsaXN0LnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRyZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG5cdHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcblx0dmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXHRpZiAoIWNzc01hcHBpbmcpIHtcblx0XHRyZXR1cm4gY29udGVudDtcblx0fVxuXG5cdGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcblx0XHR2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcblx0XHR2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuXHRcdFx0cmV0dXJuICcvKiMgc291cmNlVVJMPScgKyBjc3NNYXBwaW5nLnNvdXJjZVJvb3QgKyBzb3VyY2UgKyAnICovJ1xuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbignXFxuJyk7XG5cdH1cblxuXHRyZXR1cm4gW2NvbnRlbnRdLmpvaW4oJ1xcbicpO1xufVxuXG4vLyBBZGFwdGVkIGZyb20gY29udmVydC1zb3VyY2UtbWFwIChNSVQpXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG5cdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuXHR2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcblx0dmFyIGRhdGEgPSAnc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsJyArIGJhc2U2NDtcblxuXHRyZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n')},function(module,exports,__webpack_require__){eval('/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\nvar stylesInDom = {};\n\nvar\tmemoize = function (fn) {\n\tvar memo;\n\n\treturn function () {\n\t\tif (typeof memo === "undefined") memo = fn.apply(this, arguments);\n\t\treturn memo;\n\t};\n};\n\nvar isOldIE = memoize(function () {\n\t// Test for IE <= 9 as proposed by Browserhacks\n\t// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n\t// Tests for existence of standard globals is to allow style-loader\n\t// to operate correctly into non-standard environments\n\t// @see https://github.com/webpack-contrib/style-loader/issues/177\n\treturn window && document && document.all && !window.atob;\n});\n\nvar getTarget = function (target, parent) {\n  if (parent){\n    return parent.querySelector(target);\n  }\n  return document.querySelector(target);\n};\n\nvar getElement = (function (fn) {\n\tvar memo = {};\n\n\treturn function(target, parent) {\n                // If passing function in options, then use it for resolve "head" element.\n                // Useful for Shadow Root style i.e\n                // {\n                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }\n                // }\n                if (typeof target === \'function\') {\n                        return target();\n                }\n                if (typeof memo[target] === "undefined") {\n\t\t\tvar styleTarget = getTarget.call(this, target, parent);\n\t\t\t// Special case to return head of iframe instead of iframe itself\n\t\t\tif (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n\t\t\t\ttry {\n\t\t\t\t\t// This will throw an exception if access to iframe is blocked\n\t\t\t\t\t// due to cross-origin restrictions\n\t\t\t\t\tstyleTarget = styleTarget.contentDocument.head;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tstyleTarget = null;\n\t\t\t\t}\n\t\t\t}\n\t\t\tmemo[target] = styleTarget;\n\t\t}\n\t\treturn memo[target]\n\t};\n})();\n\nvar singleton = null;\nvar\tsingletonCounter = 0;\nvar\tstylesInsertedAtTop = [];\n\nvar\tfixUrls = __webpack_require__(5);\n\nmodule.exports = function(list, options) {\n\tif (typeof DEBUG !== "undefined" && DEBUG) {\n\t\tif (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");\n\t}\n\n\toptions = options || {};\n\n\toptions.attrs = typeof options.attrs === "object" ? options.attrs : {};\n\n\t// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n\t// tags it will allow on a page\n\tif (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();\n\n\t// By default, add <style> tags to the <head> element\n        if (!options.insertInto) options.insertInto = "head";\n\n\t// By default, add <style> tags to the bottom of the target\n\tif (!options.insertAt) options.insertAt = "bottom";\n\n\tvar styles = listToStyles(list, options);\n\n\taddStylesToDom(styles, options);\n\n\treturn function update (newList) {\n\t\tvar mayRemove = [];\n\n\t\tfor (var i = 0; i < styles.length; i++) {\n\t\t\tvar item = styles[i];\n\t\t\tvar domStyle = stylesInDom[item.id];\n\n\t\t\tdomStyle.refs--;\n\t\t\tmayRemove.push(domStyle);\n\t\t}\n\n\t\tif(newList) {\n\t\t\tvar newStyles = listToStyles(newList, options);\n\t\t\taddStylesToDom(newStyles, options);\n\t\t}\n\n\t\tfor (var i = 0; i < mayRemove.length; i++) {\n\t\t\tvar domStyle = mayRemove[i];\n\n\t\t\tif(domStyle.refs === 0) {\n\t\t\t\tfor (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();\n\n\t\t\t\tdelete stylesInDom[domStyle.id];\n\t\t\t}\n\t\t}\n\t};\n};\n\nfunction addStylesToDom (styles, options) {\n\tfor (var i = 0; i < styles.length; i++) {\n\t\tvar item = styles[i];\n\t\tvar domStyle = stylesInDom[item.id];\n\n\t\tif(domStyle) {\n\t\t\tdomStyle.refs++;\n\n\t\t\tfor(var j = 0; j < domStyle.parts.length; j++) {\n\t\t\t\tdomStyle.parts[j](item.parts[j]);\n\t\t\t}\n\n\t\t\tfor(; j < item.parts.length; j++) {\n\t\t\t\tdomStyle.parts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\t\t} else {\n\t\t\tvar parts = [];\n\n\t\t\tfor(var j = 0; j < item.parts.length; j++) {\n\t\t\t\tparts.push(addStyle(item.parts[j], options));\n\t\t\t}\n\n\t\t\tstylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};\n\t\t}\n\t}\n}\n\nfunction listToStyles (list, options) {\n\tvar styles = [];\n\tvar newStyles = {};\n\n\tfor (var i = 0; i < list.length; i++) {\n\t\tvar item = list[i];\n\t\tvar id = options.base ? item[0] + options.base : item[0];\n\t\tvar css = item[1];\n\t\tvar media = item[2];\n\t\tvar sourceMap = item[3];\n\t\tvar part = {css: css, media: media, sourceMap: sourceMap};\n\n\t\tif(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});\n\t\telse newStyles[id].parts.push(part);\n\t}\n\n\treturn styles;\n}\n\nfunction insertStyleElement (options, style) {\n\tvar target = getElement(options.insertInto)\n\n\tif (!target) {\n\t\tthrow new Error("Couldn\'t find a style target. This probably means that the value for the \'insertInto\' parameter is invalid.");\n\t}\n\n\tvar lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];\n\n\tif (options.insertAt === "top") {\n\t\tif (!lastStyleElementInsertedAtTop) {\n\t\t\ttarget.insertBefore(style, target.firstChild);\n\t\t} else if (lastStyleElementInsertedAtTop.nextSibling) {\n\t\t\ttarget.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);\n\t\t} else {\n\t\t\ttarget.appendChild(style);\n\t\t}\n\t\tstylesInsertedAtTop.push(style);\n\t} else if (options.insertAt === "bottom") {\n\t\ttarget.appendChild(style);\n\t} else if (typeof options.insertAt === "object" && options.insertAt.before) {\n\t\tvar nextSibling = getElement(options.insertAt.before, target);\n\t\ttarget.insertBefore(style, nextSibling);\n\t} else {\n\t\tthrow new Error("[Style Loader]\\n\\n Invalid value for parameter \'insertAt\' (\'options.insertAt\') found.\\n Must be \'top\', \'bottom\', or Object.\\n (https://github.com/webpack-contrib/style-loader#insertat)\\n");\n\t}\n}\n\nfunction removeStyleElement (style) {\n\tif (style.parentNode === null) return false;\n\tstyle.parentNode.removeChild(style);\n\n\tvar idx = stylesInsertedAtTop.indexOf(style);\n\tif(idx >= 0) {\n\t\tstylesInsertedAtTop.splice(idx, 1);\n\t}\n}\n\nfunction createStyleElement (options) {\n\tvar style = document.createElement("style");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = "text/css";\n\t}\n\n\tif(options.attrs.nonce === undefined) {\n\t\tvar nonce = getNonce();\n\t\tif (nonce) {\n\t\t\toptions.attrs.nonce = nonce;\n\t\t}\n\t}\n\n\taddAttrs(style, options.attrs);\n\tinsertStyleElement(options, style);\n\n\treturn style;\n}\n\nfunction createLinkElement (options) {\n\tvar link = document.createElement("link");\n\n\tif(options.attrs.type === undefined) {\n\t\toptions.attrs.type = "text/css";\n\t}\n\toptions.attrs.rel = "stylesheet";\n\n\taddAttrs(link, options.attrs);\n\tinsertStyleElement(options, link);\n\n\treturn link;\n}\n\nfunction addAttrs (el, attrs) {\n\tObject.keys(attrs).forEach(function (key) {\n\t\tel.setAttribute(key, attrs[key]);\n\t});\n}\n\nfunction getNonce() {\n\tif (false) {}\n\n\treturn __webpack_require__.nc;\n}\n\nfunction addStyle (obj, options) {\n\tvar style, update, remove, result;\n\n\t// If a transform function was defined, run it on the css\n\tif (options.transform && obj.css) {\n\t    result = typeof options.transform === \'function\'\n\t\t ? options.transform(obj.css) \n\t\t : options.transform.default(obj.css);\n\n\t    if (result) {\n\t    \t// If transform returns a value, use that instead of the original css.\n\t    \t// This allows running runtime transformations on the css.\n\t    \tobj.css = result;\n\t    } else {\n\t    \t// If the transform function returns a falsy value, don\'t add this css.\n\t    \t// This allows conditional loading of css\n\t    \treturn function() {\n\t    \t\t// noop\n\t    \t};\n\t    }\n\t}\n\n\tif (options.singleton) {\n\t\tvar styleIndex = singletonCounter++;\n\n\t\tstyle = singleton || (singleton = createStyleElement(options));\n\n\t\tupdate = applyToSingletonTag.bind(null, style, styleIndex, false);\n\t\tremove = applyToSingletonTag.bind(null, style, styleIndex, true);\n\n\t} else if (\n\t\tobj.sourceMap &&\n\t\ttypeof URL === "function" &&\n\t\ttypeof URL.createObjectURL === "function" &&\n\t\ttypeof URL.revokeObjectURL === "function" &&\n\t\ttypeof Blob === "function" &&\n\t\ttypeof btoa === "function"\n\t) {\n\t\tstyle = createLinkElement(options);\n\t\tupdate = updateLink.bind(null, style, options);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\n\t\t\tif(style.href) URL.revokeObjectURL(style.href);\n\t\t};\n\t} else {\n\t\tstyle = createStyleElement(options);\n\t\tupdate = applyToTag.bind(null, style);\n\t\tremove = function () {\n\t\t\tremoveStyleElement(style);\n\t\t};\n\t}\n\n\tupdate(obj);\n\n\treturn function updateStyle (newObj) {\n\t\tif (newObj) {\n\t\t\tif (\n\t\t\t\tnewObj.css === obj.css &&\n\t\t\t\tnewObj.media === obj.media &&\n\t\t\t\tnewObj.sourceMap === obj.sourceMap\n\t\t\t) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tupdate(obj = newObj);\n\t\t} else {\n\t\t\tremove();\n\t\t}\n\t};\n}\n\nvar replaceText = (function () {\n\tvar textStore = [];\n\n\treturn function (index, replacement) {\n\t\ttextStore[index] = replacement;\n\n\t\treturn textStore.filter(Boolean).join(\'\\n\');\n\t};\n})();\n\nfunction applyToSingletonTag (style, index, remove, obj) {\n\tvar css = remove ? "" : obj.css;\n\n\tif (style.styleSheet) {\n\t\tstyle.styleSheet.cssText = replaceText(index, css);\n\t} else {\n\t\tvar cssNode = document.createTextNode(css);\n\t\tvar childNodes = style.childNodes;\n\n\t\tif (childNodes[index]) style.removeChild(childNodes[index]);\n\n\t\tif (childNodes.length) {\n\t\t\tstyle.insertBefore(cssNode, childNodes[index]);\n\t\t} else {\n\t\t\tstyle.appendChild(cssNode);\n\t\t}\n\t}\n}\n\nfunction applyToTag (style, obj) {\n\tvar css = obj.css;\n\tvar media = obj.media;\n\n\tif(media) {\n\t\tstyle.setAttribute("media", media)\n\t}\n\n\tif(style.styleSheet) {\n\t\tstyle.styleSheet.cssText = css;\n\t} else {\n\t\twhile(style.firstChild) {\n\t\t\tstyle.removeChild(style.firstChild);\n\t\t}\n\n\t\tstyle.appendChild(document.createTextNode(css));\n\t}\n}\n\nfunction updateLink (link, options, obj) {\n\tvar css = obj.css;\n\tvar sourceMap = obj.sourceMap;\n\n\t/*\n\t\tIf convertToAbsoluteUrls isn\'t defined, but sourcemaps are enabled\n\t\tand there is no publicPath defined then lets turn convertToAbsoluteUrls\n\t\ton by default.  Otherwise default to the convertToAbsoluteUrls option\n\t\tdirectly\n\t*/\n\tvar autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;\n\n\tif (options.convertToAbsoluteUrls || autoFixUrls) {\n\t\tcss = fixUrls(css);\n\t}\n\n\tif (sourceMap) {\n\t\t// http://stackoverflow.com/a/26603875\n\t\tcss += "\\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";\n\t}\n\n\tvar blob = new Blob([css], { type: "text/css" });\n\n\tvar oldSrc = link.href;\n\n\tlink.href = URL.createObjectURL(blob);\n\n\tif(oldSrc) URL.revokeObjectURL(oldSrc);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n')},function(module,exports){eval('/**\n * When source maps are enabled, `style-loader` uses a link element with a data-uri to\n * embed the css on the page. This breaks all relative urls because now they are relative to a\n * bundle instead of the current page.\n *\n * One solution is to only use full urls, but that may be impossible.\n *\n * Instead, this function "fixes" the relative urls to be absolute according to the current page location.\n *\n * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.\n *\n */\nmodule.exports = function (css) {\n  // get current location\n  var location = typeof window !== "undefined" && window.location;\n\n  if (!location) {\n    throw new Error("fixUrls requires window.location");\n  } // blank or null?\n\n\n  if (!css || typeof css !== "string") {\n    return css;\n  }\n\n  var baseUrl = location.protocol + "//" + location.host;\n  var currentDir = baseUrl + location.pathname.replace(/\\/[^\\/]*$/, "/"); // convert each url(...)\n\n  /*\n  This regular expression is just a way to recursively match brackets within\n  a string.\n  \t /url\\s*\\(  = Match on the word "url" with any whitespace after it and then a parens\n     (  = Start a capturing group\n       (?:  = Start a non-capturing group\n           [^)(]  = Match anything that isn\'t a parentheses\n           |  = OR\n           \\(  = Match a start parentheses\n               (?:  = Start another non-capturing groups\n                   [^)(]+  = Match anything that isn\'t a parentheses\n                   |  = OR\n                   \\(  = Match a start parentheses\n                       [^)(]*  = Match anything that isn\'t a parentheses\n                   \\)  = Match a end parentheses\n               )  = End Group\n               *\\) = Match anything and then a close parens\n           )  = Close non-capturing group\n           *  = Match anything\n        )  = Close capturing group\n   \\)  = Match a close parens\n  \t /gi  = Get all matches, not the first.  Be case insensitive.\n   */\n\n  var fixedCss = css.replace(/url\\s*\\(((?:[^)(]|\\((?:[^)(]+|\\([^)(]*\\))*\\))*)\\)/gi, function (fullMatch, origUrl) {\n    // strip quotes (if they exist)\n    var unquotedOrigUrl = origUrl.trim().replace(/^"(.*)"$/, function (o, $1) {\n      return $1;\n    }).replace(/^\'(.*)\'$/, function (o, $1) {\n      return $1;\n    }); // already a full url? no change\n\n    if (/^(#|data:|http:\\/\\/|https:\\/\\/|file:\\/\\/\\/|\\s*$)/i.test(unquotedOrigUrl)) {\n      return fullMatch;\n    } // convert the url to a full url\n\n\n    var newUrl;\n\n    if (unquotedOrigUrl.indexOf("//") === 0) {\n      //TODO: should we add protocol?\n      newUrl = unquotedOrigUrl;\n    } else if (unquotedOrigUrl.indexOf("/") === 0) {\n      // path should be relative to the base url\n      newUrl = baseUrl + unquotedOrigUrl; // already starts with \'/\'\n    } else {\n      // path should be relative to current directory\n      newUrl = currentDir + unquotedOrigUrl.replace(/^\\.\\//, ""); // Strip leading \'./\'\n    } // send back the fixed url(...)\n\n\n    return "url(" + JSON.stringify(newUrl) + ")";\n  }); // send back the fixed css\n\n  return fixedCss;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi91cmxzLmpzP2Y2ZDMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImNzcyIsImxvY2F0aW9uIiwid2luZG93IiwiRXJyb3IiLCJiYXNlVXJsIiwicHJvdG9jb2wiLCJob3N0IiwiY3VycmVudERpciIsInBhdGhuYW1lIiwicmVwbGFjZSIsImZpeGVkQ3NzIiwiZnVsbE1hdGNoIiwib3JpZ1VybCIsInVucXVvdGVkT3JpZ1VybCIsInRyaW0iLCJvIiwiJDEiLCJ0ZXN0IiwibmV3VXJsIiwiaW5kZXhPZiIsIkpTT04iLCJzdHJpbmdpZnkiXSwibWFwcGluZ3MiOiJBQUNBOzs7Ozs7Ozs7Ozs7QUFhQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLEdBQVYsRUFBZTtBQUM5QjtBQUNBLE1BQUlDLFFBQVEsR0FBRyxPQUFPQyxNQUFQLEtBQWtCLFdBQWxCLElBQWlDQSxNQUFNLENBQUNELFFBQXZEOztBQUVBLE1BQUksQ0FBQ0EsUUFBTCxFQUFlO0FBQ2IsVUFBTSxJQUFJRSxLQUFKLENBQVUsa0NBQVYsQ0FBTjtBQUNELEdBTjZCLENBUS9COzs7QUFDQSxNQUFJLENBQUNILEdBQUQsSUFBUSxPQUFPQSxHQUFQLEtBQWUsUUFBM0IsRUFBcUM7QUFDbkMsV0FBT0EsR0FBUDtBQUNBOztBQUVELE1BQUlJLE9BQU8sR0FBR0gsUUFBUSxDQUFDSSxRQUFULEdBQW9CLElBQXBCLEdBQTJCSixRQUFRLENBQUNLLElBQWxEO0FBQ0EsTUFBSUMsVUFBVSxHQUFHSCxPQUFPLEdBQUdILFFBQVEsQ0FBQ08sUUFBVCxDQUFrQkMsT0FBbEIsQ0FBMEIsV0FBMUIsRUFBdUMsR0FBdkMsQ0FBM0IsQ0FkOEIsQ0FnQi9COztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5QkEsTUFBSUMsUUFBUSxHQUFHVixHQUFHLENBQUNTLE9BQUosQ0FBWSxxREFBWixFQUFtRSxVQUFTRSxTQUFULEVBQW9CQyxPQUFwQixFQUE2QjtBQUM5RztBQUNBLFFBQUlDLGVBQWUsR0FBR0QsT0FBTyxDQUMzQkUsSUFEb0IsR0FFcEJMLE9BRm9CLENBRVosVUFGWSxFQUVBLFVBQVNNLENBQVQsRUFBWUMsRUFBWixFQUFlO0FBQUUsYUFBT0EsRUFBUDtBQUFZLEtBRjdCLEVBR3BCUCxPQUhvQixDQUdaLFVBSFksRUFHQSxVQUFTTSxDQUFULEVBQVlDLEVBQVosRUFBZTtBQUFFLGFBQU9BLEVBQVA7QUFBWSxLQUg3QixDQUF0QixDQUY4RyxDQU85Rzs7QUFDQSxRQUFJLG9EQUFvREMsSUFBcEQsQ0FBeURKLGVBQXpELENBQUosRUFBK0U7QUFDN0UsYUFBT0YsU0FBUDtBQUNELEtBVjZHLENBWTlHOzs7QUFDQSxRQUFJTyxNQUFKOztBQUVBLFFBQUlMLGVBQWUsQ0FBQ00sT0FBaEIsQ0FBd0IsSUFBeEIsTUFBa0MsQ0FBdEMsRUFBeUM7QUFDdEM7QUFDRkQsWUFBTSxHQUFHTCxlQUFUO0FBQ0EsS0FIRCxNQUdPLElBQUlBLGVBQWUsQ0FBQ00sT0FBaEIsQ0FBd0IsR0FBeEIsTUFBaUMsQ0FBckMsRUFBd0M7QUFDOUM7QUFDQUQsWUFBTSxHQUFHZCxPQUFPLEdBQUdTLGVBQW5CLENBRjhDLENBRVY7QUFDcEMsS0FITSxNQUdBO0FBQ047QUFDQUssWUFBTSxHQUFHWCxVQUFVLEdBQUdNLGVBQWUsQ0FBQ0osT0FBaEIsQ0FBd0IsT0FBeEIsRUFBaUMsRUFBakMsQ0FBdEIsQ0FGTSxDQUVzRDtBQUM1RCxLQXhCNkcsQ0EwQjlHOzs7QUFDQSxXQUFPLFNBQVNXLElBQUksQ0FBQ0MsU0FBTCxDQUFlSCxNQUFmLENBQVQsR0FBa0MsR0FBekM7QUFDQSxHQTVCYyxDQUFmLENBMUMrQixDQXdFL0I7O0FBQ0EsU0FBT1IsUUFBUDtBQUNBLENBMUVEIiwiZmlsZSI6IjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/framework/utils/index.js\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nvar observe = function observe(obj, cb) {\n  var validator = {\n    get: function get(target, key) {\n      if (_typeof(target[key]) === \'object\' && target[key] !== null) {\n        return new Proxy(target[key], validator);\n      }\n\n      return target[key];\n    },\n    set: function set(target, key, value) {\n      if (target[key] !== value) {\n        Reflect.set(target, key, value);\n        cb && cb.apply(void 0, arguments);\n      }\n\n      return true;\n    }\n  };\n  return new Proxy(obj, validator);\n};\nvar generateId = function generateId(n) {\n  return Math.floor(Math.random() * Math.pow(16, n)).toString(16);\n};\n// CONCATENATED MODULE: ./src/framework/Component.js\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar Component_Component =\n/*#__PURE__*/\nfunction () {\n  function Component() {\n    var data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, Component);\n\n    _defineProperty(this, "eventMap", {});\n\n    _defineProperty(this, "onComponentMount", function () {});\n\n    _defineProperty(this, "onComponentUpdate", function () {});\n\n    _defineProperty(this, "onComponentDestroy", function () {});\n\n    this.update = this.update.bind(this);\n    this.clearRoot = this.clearRoot.bind(this);\n    /* create observable from passed data argument. Set this.update as a callback fn to observe any data update. Assign it to \'this.model\' attribute */\n\n    this.model = observe(data, this.update);\n    /* set isMounted flag to false, since there is no HTML representation of this view yet, just an object */\n\n    this.isMounted = false;\n    /* create container HTML element that will contain rendered view */\n\n    this.containerElement = document.createElement(\'div\');\n    /* generate random ID and set it to this.id */\n\n    this.id = generateId(6);\n    /* set HTML id to container HTML element */\n\n    this.containerElement.id = "view_".concat(this.id);\n    this.containerElement.setAttribute(\'class\', \'container\');\n  }\n  /**\r\n   * @param {*} root - Root HTML element to contain view representation.\r\n   */\n\n\n  _createClass(Component, [{\n    key: "mountTo",\n    value: function mountTo(root) {\n      this.rootElement = root;\n      this.clearRoot();\n      this.update();\n      !this.isMounted && this.attachEvents();\n      this.rootElement.appendChild(this.containerElement);\n      this.isMounted = true;\n      this.onComponentMount();\n    }\n    /**\r\n     * \'eventName @@ elementQuery\': callbackFn\r\n     */\n\n  }, {\n    key: "render",\n    value: function render() {\n      return \'\';\n    }\n  }, {\n    key: "attachEvents",\n    value: function attachEvents() {\n      var _this = this;\n\n      var _loop = function _loop(key) {\n        var _key$split = key.split(\' @@ \'),\n            _key$split2 = _slicedToArray(_key$split, 2),\n            eventName = _key$split2[0],\n            query = _key$split2[1];\n\n        _this.containerElement.addEventListener(eventName, function (event) {\n          if (Array.from(document.querySelectorAll(query)).includes(event.target)) {\n            _this.eventMap[key](event);\n          }\n        });\n      };\n\n      for (var key in this.eventMap) {\n        _loop(key);\n      }\n    }\n  }, {\n    key: "update",\n    value: function update() {\n      this.containerElement.innerHTML = this.render();\n      this.isMounted && this.onComponentUpdate();\n    }\n  }, {\n    key: "clearRoot",\n    value: function clearRoot() {\n      if (this.rootElement) {\n        while (this.rootElement.firstChild) {\n          this.rootElement.removeChild(this.rootElement.firstChild);\n        }\n      }\n    }\n  }, {\n    key: "unmount",\n    value: function unmount() {\n      var _this2 = this;\n\n      var _loop2 = function _loop2(key) {\n        var _key$split3 = key.split(\' @@ \'),\n            _key$split4 = _slicedToArray(_key$split3, 2),\n            eventName = _key$split4[0],\n            query = _key$split4[1];\n\n        _this2.containerElement.removeEventListener(eventName, function (event) {\n          if (Array.from(document.querySelectorAll(query)).includes(event.target)) {\n            _this2.eventMap[key](event);\n          }\n        });\n      };\n\n      for (var key in this.eventMap) {\n        _loop2(key);\n      }\n\n      this.clearRoot();\n      this.isMounted = false;\n      this.onComponentDestroy();\n    }\n  }]);\n\n  return Component;\n}();\n\n\n// CONCATENATED MODULE: ./src/framework/eventBus.js\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }\n\nfunction _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }\n\nfunction eventBus_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction eventBus_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction eventBus_createClass(Constructor, protoProps, staticProps) { if (protoProps) eventBus_defineProperties(Constructor.prototype, protoProps); if (staticProps) eventBus_defineProperties(Constructor, staticProps); return Constructor; }\n\nvar instance;\n\nvar EventBus =\n/*#__PURE__*/\nfunction () {\n  function EventBus() {\n    eventBus_classCallCheck(this, EventBus);\n\n    if (instance) return instance;\n    this.events = new Map();\n    /* this.events = {\r\n      someEvent: [ () => {}, () => {} ]\r\n    };\r\n    */\n\n    instance = this;\n  }\n\n  eventBus_createClass(EventBus, [{\n    key: "publish",\n    value: function publish(eventName, data) {\n      var handlers = this.events.get(eventName);\n      console.log("EVENTBUS: publishing event \\"".concat(eventName, "\\" with data ").concat(JSON.stringify(data)));\n      handlers.forEach(function (handler) {\n        handler(data);\n      });\n    }\n  }, {\n    key: "subscribe",\n    value: function subscribe(eventName, callback) {\n      var handlers = this.events.get(eventName) || [];\n      this.events.set(eventName, _toConsumableArray(handlers).concat([callback]));\n    }\n  }, {\n    key: "unsubscribe",\n    value: function unsubscribe(eventName) {\n      this.events.set(eventName, null);\n    }\n  }]);\n\n  return EventBus;\n}();\n\n\n// CONCATENATED MODULE: ./src/framework/router.js\nfunction router_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nvar Router = function Router(routes) {\n  router_classCallCheck(this, Router);\n\n  console.log(window.location.hash);\n  window.addEventListener(\'hashchange\', function () {\n    var hash = window.location.hash;\n    routes[hash] && routes[hash]();\n  });\n};\n\n\n// CONCATENATED MODULE: ./src/framework/template.js\nfunction template(strings) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return strings.reduce(function (acc, str, i) {\n    return acc + str + (args[i] ? args[i] : \'\');\n  }, \'\');\n}\n// CONCATENATED MODULE: ./src/framework/index.js\n\n\n\n\n\n\n// CONCATENATED MODULE: ./src/api.js\nvar rootUrl = \'http://localhost:5000/api\';\nvar getColumns = function getColumns() {\n  return fetch("".concat(rootUrl, "/columns"), {\n    method: \'GET\'\n  }).then(function (response) {\n    console.log(response);\n    return response.json();\n  });\n};\nvar createColumn = function createColumn(columnData) {\n  return fetch("".concat(rootUrl, "/columns"), {\n    method: \'POST\',\n    headers: {\n      \'Accept\': \'application/json\',\n      \'Content-Type\': \'application/json\'\n    },\n    body: JSON.stringify(columnData)\n  }).then(function (res) {\n    if (res.ok) {\n      return res.text();\n    } else {\n      throw new Error(\'something wrong with server\');\n    }\n  });\n};\nvar removeColumn = function removeColumn(columnId) {\n  return fetch("".concat(rootUrl, "/columns/").concat(columnId), {\n    method: \'DELETE\'\n  }).then(function (res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      throw new Error(\'something wrong with server\');\n    }\n  });\n};\nvar createPost = function createPost(postData, columnId) {\n  return fetch("".concat(rootUrl, "/columns/").concat(columnId), {\n    method: \'POST\',\n    headers: {\n      \'Accept\': \'application/json\',\n      \'Content-Type\': \'application/json\'\n    },\n    body: JSON.stringify(postData)\n  }).then(function (res) {\n    if (res.ok) {\n      return res.text();\n    } else {\n      throw new Error(\'something wrong with server\');\n    }\n  });\n};\nvar removePost = function removePost(currentPostId, currentColumnId) {\n  // console.log(postId, columnId);\n  return fetch("".concat(rootUrl, "/columns/").concat(currentColumnId, "/posts/").concat(currentPostId), {\n    method: \'DELETE\'\n  }).then(function (res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      throw new Error(\'something wrong with server\');\n    }\n  });\n};\nvar updatePost = function updatePost(postData, currentColumnId) {\n  console.log(postData, currentColumnId);\n  return fetch("".concat(rootUrl, "/columns/").concat(currentColumnId, "/posts/").concat(postData.id), {\n    method: \'PUT\',\n    headers: {\n      \'Accept\': \'application/json\',\n      \'Content-Type\': \'application/json\'\n    },\n    body: JSON.stringify(postData)\n  }).then(function (res) {\n    if (res.ok) {\n      return res.json();\n    } else {\n      throw new Error(\'something wrong with server\');\n    }\n  });\n};\nvar toggleItem = function toggleItem(_ref) {\n  var srcColId = _ref.srcColId,\n      itemId = _ref.itemId,\n      destColId = _ref.destColId;\n  return fetch("".concat(rootUrl, "/columns/toggle"), {\n    method: \'POST\',\n    headers: {\n      \'Accept\': \'application/json\',\n      \'Content-Type\': \'application/json\'\n    },\n    body: JSON.stringify({\n      srcColId: srcColId,\n      itemId: itemId,\n      destColId: destColId\n    })\n  }).then(function (res) {\n    if (res.ok) {\n      return res.text();\n    } else {\n      throw new Error(\'something wrong with server\');\n    }\n  });\n};\n// EXTERNAL MODULE: ./src/app.scss\nvar app = __webpack_require__(2);\n\n// CONCATENATED MODULE: ./src/views/Calendar.js\nfunction Calendar_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { Calendar_typeof = function _typeof(obj) { return typeof obj; }; } else { Calendar_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return Calendar_typeof(obj); }\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral(["\\n      <div>\\n        \\n        <div id=\\"calendar\\">\\n\\n          <div class=\\"controls\\">\\n            <div id=\\"date\\">2018 May</div>\\n            <div class=\\"buttons\\">\\n              <a class=\\"button\\" id=\\"prev\\">\\u2190</a>\\n              <a class=\\"button\\" id=\\"next\\">\\u2192</a>\\n            </div>\\n          </div>\\n\\n          <div class=\\"daysName\\">\\n          <div>Mon</div>\\n          <div>Tue</div>\\n            <div>Wed</div>\\n            <div>Thu</div>\\n            <div>Fri</div>\\n            <div>Sut</div>\\n            <div>Sun</div>\\n          </div>\\n\\n          <div id=\\"days\\">\\n            <div class=\\"day other\\"></div>\\n            <div class=\\"day\\">1</div>\\n            <div class=\\"day\\">2</div>\\n            <div class=\\"day\\">3</div>\\n            <div class=\\"day\\">4</div>\\n            <div class=\\"day\\">5</div>\\n            <div class=\\"day\\">6</div>\\n            <div class=\\"day\\">7</div>\\n            <div class=\\"day\\">8</div>\\n            <div class=\\"day\\">9</div>\\n            <div class=\\"day\\">10</div>\\n            <div class=\\"day\\">11</div>\\n            <div class=\\"day\\">12</div>\\n            <div class=\\"day\\">13</div>\\n            <div class=\\"day\\">14</div>\\n            <div class=\\"day\\">15</div>\\n            <div class=\\"day\\">16</div>\\n            <div class=\\"day\\">17</div>\\n            <div class=\\"day\\">18</div>\\n            <div class=\\"day\\">19</div>\\n            <div class=\\"day\\">20</div>\\n            <div class=\\"day\\">21</div>\\n            <div class=\\"day\\">22</div>\\n            <div class=\\"day today\\">23</div>\\n            <div class=\\"day\\">24</div>\\n            <div class=\\"day\\">25</div>\\n            <div class=\\"day\\">26</div>\\n            <div class=\\"day\\">27</div>\\n            <div class=\\"day\\">28</div>\\n            <div class=\\"day\\">29</div>\\n            <div class=\\"day\\">30</div>\\n            <div class=\\"day\\">31</div>\\n          </div>\\n        </div>\\n    \\n\\n      </div>\\n    "]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction Calendar_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Calendar_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Calendar_createClass(Constructor, protoProps, staticProps) { if (protoProps) Calendar_defineProperties(Constructor.prototype, protoProps); if (staticProps) Calendar_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (Calendar_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction Calendar_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n //import Datepickk from \'../../node_modules/datepickk/dist/datepickk\';\n\nvar Calendar_Calendar =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Calendar, _Component);\n\n  function Calendar(data) {\n    var _this;\n\n    Calendar_classCallCheck(this, Calendar);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Calendar).call(this, data)); // this.datepicker = new Datepickk();\n    // this.datepicker.container = document.querySelector(\'#datepicker\');\n    // this.datepicker.inline = true;\n    // //this.datepicker.range = true;\n    // this.datepicker.weekStart = 1;\n    // console.log(data);\n\n    Calendar_defineProperty(_assertThisInitialized(_assertThisInitialized(_this)), "onComponentMount", function () {\n      console.log(\'calendar is mounted now!\'); // this.datepicker.show();\n    });\n\n    return _this;\n  }\n\n  Calendar_createClass(Calendar, [{\n    key: "render",\n    value: function render() {\n      return template(_templateObject());\n    }\n  }]);\n\n  return Calendar;\n}(Component_Component);\n\n\n// EXTERNAL MODULE: ./node_modules/sortablejs/Sortable.js\nvar Sortable = __webpack_require__(1);\nvar Sortable_default = /*#__PURE__*/__webpack_require__.n(Sortable);\n\n// CONCATENATED MODULE: ./src/views/Board.js\nfunction Board_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { Board_typeof = function _typeof(obj) { return typeof obj; }; } else { Board_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return Board_typeof(obj); }\n\nfunction _templateObject3() {\n  var data = Board_taggedTemplateLiteral(["\\n    <div class=\\"board row\\">\\n      ", "\\n      <section class=\\"new-section col s12 m4 l4 valign-wrapper\\" >\\n        <a class=\\"btn-floating pulse center-align\\"><i class=\\"material-icons\\">add</i></a>\\n      </section>\\n\\n      <div class=\\"modal\\">\\n        <div class=\\"modal-content\\">\\n          <h4></h4>\\n\\n          <div class=\\"input-field\\">\\n              <input id=\\"title\\" type=\\"text\\" class=\\"validate valid\\" required=\\"\\" data-length=\\"80\\">\\n              <label for=\\"title\\" class=\\"\\">Header</label>\\n          </div>\\n\\n          <div class=\\"input-field\\">\\n              <textarea id=\\"text\\" class=\\"materialize-textarea\\" data-length=\\"1000\\" style=\\"height: 45px;\\"></textarea>\\n              <label for=\\"text\\" class=\\"\\">Description</label>\\n          </div>\\n          </div>\\n        <div class=\\"modal-footer\\">\\n            <a class=\\"waves-effect waves-light btn\\" id=\\"buttonCreatePost\\"></a>\\n        </div>\\n      </div>\\n    </div>\\n  "]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = Board_taggedTemplateLiteral(["<section class=\\"col s12 m6 l4\\" data-columnId=", ">\\n        <header>\\n          <h5>", "<i class=\\"material-icons remove-column red-text text-darken-3\\" id=\\"", "\\">delete</i></h5>\\n          \\n          <span>Add a new To Do</span>\\n\\n          <button data-target=\\"modal1\\" data-columnId=", " class=\\"btn modalOpener blue-grey add-", "\\">Modal</button>\\n        </header>\\n        <ul class=\\"content js-sortable sortable\\">\\n          ", "\\n        </ul>\\n    </section>"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction Board_templateObject() {\n  var data = Board_taggedTemplateLiteral(["<li data-postId=", " draggable=\\"true\\">\\n\\n      <p>id = ", "</p>\\n      <p>", "</p>\\n      <p>", "</p>\\n      <p class=\\"date\\">", "</p>\\n      <p class=\\"date\\">", "</p>\\n      <span><i class=\\"material-icons remove-post red-text text-darken-3\\" id=", ">delete</i></span>\\n      <span><i class=\\"material-icons toggle-post red-text text-darken-3\\">assignment_turned_in</i></span>\\n      <p>\\n        <a class=\\"waves-effect waves-light btn-small buttonUpdatePost\\" id=", ">Edit post</a>\\n      </p>\\n    </li>"]);\n\n  Board_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction Board_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction Board_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Board_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Board_createClass(Constructor, protoProps, staticProps) { if (protoProps) Board_defineProperties(Constructor.prototype, protoProps); if (staticProps) Board_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction Board_possibleConstructorReturn(self, call) { if (call && (Board_typeof(call) === "object" || typeof call === "function")) { return call; } return Board_assertThisInitialized(self); }\n\nfunction Board_getPrototypeOf(o) { Board_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Board_getPrototypeOf(o); }\n\nfunction Board_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) Board_setPrototypeOf(subClass, superClass); }\n\nfunction Board_setPrototypeOf(o, p) { Board_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Board_setPrototypeOf(o, p); }\n\nfunction Board_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction Board_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n //import Materialize from \'materialize-css\';\n\n\n\nvar Board_Board =\n/*#__PURE__*/\nfunction (_Component) {\n  Board_inherits(Board, _Component);\n\n  function Board(data) {\n    var _this;\n\n    Board_classCallCheck(this, Board);\n\n    _this = Board_possibleConstructorReturn(this, Board_getPrototypeOf(Board).call(this, data));\n\n    Board_defineProperty(Board_assertThisInitialized(Board_assertThisInitialized(_this)), "eventMap", {\n      \'click @@ .new-section a i\': function clickNewSectionAI() {\n        var newColumn = {\n          name: "column",\n          id: Math.floor(Math.random() * 16 * 16 * 16 * 16 * 16 * 16).toString(16),\n          items: []\n        };\n        newColumn.name = "".concat(newColumn.name, "-").concat(newColumn.id); // show loader\n\n        createColumn(newColumn).then(function () {\n          // hide loader\n          _this.model.columns.push(newColumn);\n\n          console.log(_this.model.columns);\n        }).catch(function (e) {\n          // hide loader\n          console.log(e);\n        });\n        Sortable_default.a.create("000000", {\n          animation: 200,\n          group: {\n            name: "shared",\n            //pull: "clone",\n            revertClone: true\n          },\n          sort: true\n        });\n        Sortable_default.a.create("000001", {\n          group: "shared",\n          sort: false\n        });\n      },\n      \'click @@ .remove-column\': function clickRemoveColumn(_ref) {\n        var target = _ref.target;\n        var columnId = target.id;\n        console.log(columnId);\n        removeColumn(columnId).then(function () {\n          _this.model.columns = _this.model.columns.filter(function (_ref2) {\n            var id = _ref2.id;\n            return id !== columnId;\n          });\n        }).catch(function (e) {\n          console.log(e);\n        });\n      },\n      // ====== REMOVE POST ====== //\n      \'click @@ .remove-post\': function clickRemovePost(_ref3) {\n        var target = _ref3.target;\n        var currentPostId = target.id;\n        console.log("currentPostId = " + currentPostId);\n        var currentColumnId = target.closest(\'section\').dataset.columnid;\n        console.log("currentColumnId = " + currentColumnId); //postTarget.parentNode.parentNode.remove();\n\n        removePost(currentPostId, currentColumnId).then(function () {\n          var currentColumn = _this.model.columns.find(function (_ref4) {\n            var id = _ref4.id;\n            return id === currentColumnId;\n          });\n\n          currentColumn.items = currentColumn.items.filter(function (_ref5) {\n            var id = _ref5.id;\n            return id !== currentPostId;\n          });\n        }).catch(function (e) {\n          console.log(e);\n        });\n      },\n      // ====== Moving to other column ===== //\n      \'click @@ .toggle-post\': function clickTogglePost(_ref6) {\n        var target = _ref6.target;\n        var srcColId = target.closest(\'section\').dataset.columnid;\n        console.log(srcColId);\n        var itemId = target.closest(\'li\').dataset.postid;\n        console.log(itemId);\n        var destColId = \'000001\';\n        console.log(destColId);\n        toggleItem({\n          srcColId: srcColId,\n          itemId: itemId,\n          destColId: destColId\n        }).then(function () {\n          console.log(\'successguly toggled item\');\n\n          var currentColumn = _this.model.columns.find(function (_ref7) {\n            var id = _ref7.id;\n            return id === srcColId;\n          });\n\n          console.log(currentColumn);\n\n          var destColumn = _this.model.columns.find(function (_ref8) {\n            var id = _ref8.id;\n            return id === destColId;\n          });\n\n          console.log(destColumn);\n          currentColumn.items = currentColumn.items.filter(function (_ref9) {\n            var id = _ref9.id;\n            return id !== itemId;\n          });\n          console.log(currentColumn.items);\n          destColumn.items.push(itemId);\n          console.log(destColumn.items);\n        });\n      },\n      // ====== UPDATE POST ====== //\n      \'click @@ .buttonUpdatePost\': function clickButtonUpdatePost(_ref10) {\n        var target = _ref10.target;\n        _this.currentColumnId = target.closest(\'section\').dataset.columnid;\n        var currentPostId = target.closest(\'li\').dataset.postid;\n\n        var post = _this.getPost(_this.currentColumnId, currentPostId);\n\n        _this.openPostModal(post);\n      },\n      \'click @@ .modalOpener\': function clickModalOpener(event) {\n        _this.currentColumnId = event.target.dataset.columnid;\n        document.querySelector(\'#buttonCreatePost\').textContent = \'create\';\n        document.querySelector(\'.modal-content h4\').textContent = \'Creare a new post\';\n\n        _this.openPostModal({});\n      },\n      \'click @@ #buttonCreatePost\': function clickButtonCreatePost() {\n        console.log(document.querySelectorAll(\'#text\'));\n        _this.postModalData.title = document.querySelector(\'#title\').value;\n        _this.postModalData.text = document.querySelector(\'#text\').value;\n        _this.postModalData.date = _this.formatDate(new Date());\n        _this.postModalData.time = ("0" + new Date().getHours()).slice(-2) + ":" + ("0" + new Date().getMinutes()).slice(-2);\n        console.log(_this.postModalData.title, _this.postModalData.text, document.querySelector(\'#text\').value); // ============= validate text, title, etc.\n\n        var escapeHtml = function escapeHtml(text) {\n          var map = {\n            \'&\': \'&amp;\',\n            \'<\': \'&lt;\',\n            \'>\': \'&gt;\',\n            \'"\': \'&quot;\',\n            \'\\\'\': \'&#039;\'\n          };\n          return text.replace(/[&<>"\']/g, function (m) {\n            return map[m];\n          });\n        };\n\n        _this.postModalData.title = escapeHtml(_this.postModalData.title);\n        _this.postModalData.text = escapeHtml(_this.postModalData.text); //=========== checking for filling title\n\n        if (_this.postModalData) {\n          if (_this.postModalData.id) {\n            updatePost(_this.postModalData, _this.currentColumnId).then(function () {\n              var column = _this.model.columns.find(function (columnData) {\n                return columnData.id === _this.currentColumnId;\n              });\n\n              column.items = column.items.map(function (item) {\n                if (item.id === _this.postModalData.id) {\n                  return _this.postModalData;\n                } else {\n                  return item;\n                }\n              }); // this.model.columns\n            }).catch(function (e) {\n              // hide loader\n              console.log(e);\n            });\n          } else {\n            _this.postModalData.id = _this.postModalData.id || Math.floor(Math.random() * 16 * 16 * 16 * 16 * 16 * 16).toString(16);\n            createPost(_this.postModalData, _this.currentColumnId).then(function () {\n              // hide loader\n              _this.model.columns.forEach(function (columnData) {\n                if (columnData.id === _this.currentColumnId) {\n                  columnData.items.push(_this.postModalData);\n                }\n              });\n            }).catch(function (e) {\n              // hide loader\n              console.log(e);\n            });\n          }\n        }\n      }\n    });\n\n    Board_defineProperty(Board_assertThisInitialized(Board_assertThisInitialized(_this)), "toggleItem", function (target) {});\n\n    Board_defineProperty(Board_assertThisInitialized(Board_assertThisInitialized(_this)), "createPost", function (_ref11) {\n      var id = _ref11.id,\n          title = _ref11.title,\n          text = _ref11.text,\n          date = _ref11.date,\n          time = _ref11.time;\n      return template(Board_templateObject(), id, id, title, text, date, time, id, id);\n    });\n\n    Board_defineProperty(Board_assertThisInitialized(Board_assertThisInitialized(_this)), "createColumn", function (_ref12) {\n      var name = _ref12.name,\n          items = _ref12.items,\n          id = _ref12.id;\n      return template(_templateObject2(), id, name, id, id, id, items.map(_this.createPost).join(\'\'));\n    });\n\n    Board_defineProperty(Board_assertThisInitialized(Board_assertThisInitialized(_this)), "render", function () {\n      return template(_templateObject3(), _this.model.columns.map(_this.createColumn).join(\'\'));\n    });\n\n    return _this;\n  }\n\n  Board_createClass(Board, [{\n    key: "formatDate",\n    value: function formatDate(date) {\n      var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];\n      var day = date.getDate();\n      var monthIndex = date.getMonth();\n      var year = date.getFullYear();\n      return day + \' \' + monthNames[monthIndex] + \' \' + year;\n    }\n  }, {\n    key: "openPostModal",\n    value: function openPostModal(data) {\n      console.log(data);\n      this.postModalData = data;\n      this.modal = M.Modal.init(document.querySelector(\'.modal\'));\n      this.modal.open();\n      document.querySelector(\'#title\').focus();\n      document.querySelector(\'#title\').value = data.title || \'\';\n      document.querySelector(\'#text\').value = data.text || \'\';\n    }\n  }, {\n    key: "getPost",\n    value: function getPost(columnId, postId) {\n      console.log(\'looking for post =>\', columnId, postId);\n      var column = this.model.columns.find(function (c) {\n        return c.id === columnId;\n      });\n      console.log(column);\n\n      if (column) {\n        document.querySelector(\'#buttonCreatePost\').textContent = \'update\';\n        document.querySelector(\'.modal-content h4\').textContent = \'Update this post\';\n        return column.items.find(function (i) {\n          return i.id === postId;\n        });\n      } else {\n        return null;\n      }\n    }\n  }]);\n\n  return Board;\n}(Component_Component);\n\n\n// CONCATENATED MODULE: ./src/app.js\nfunction app_templateObject() {\n  var data = app_taggedTemplateLiteral(["\\n    <header class=\'header\'>\\n      <nav>\\n        <div class=\\"nav-wrapper container\\">\\n          <a class=\\"brand-logo\\">Prello</a>\\n          <a href=\\"#\\" data-target=\\"mobile-demo\\" class=\\"sidenav-trigger\\"><i class=\\"material-icons\\">menu</i></a>\\n          <ul id=\\"nav-mobile\\" class=\\"right hide-on-med-and-down\\">\\n            <li><a href=\'#main\'>main</a></li>\\n            <li><a href=\'#calendar\'>calendar</a></li>\\n          </ul>\\n        </div>\\n      </nav>\\n      <ul class=\\"sidenav\\" id=\\"mobile-demo\\">\\n        <li><a href=\'#main\'>main</a></li>\\n        <li><a href=\'#calendar\'>calendar</a></li>\\n      </ul>\\n    </header>\\n    <div id=\\"outlet\\"></div>\\n    "]);\n\n  app_templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction app_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\nfunction app_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction app_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction app_createClass(Constructor, protoProps, staticProps) { if (protoProps) app_defineProperties(Constructor.prototype, protoProps); if (staticProps) app_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction app_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\nvar app_App =\n/*#__PURE__*/\nfunction () {\n  function App() {\n    var _this = this;\n\n    var mainElement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.querySelector(\'body\');\n\n    app_classCallCheck(this, App);\n\n    app_defineProperty(this, "template", template(app_templateObject()));\n\n    var calendar = new Calendar_Calendar({\n      name: \'Calendar\'\n    });\n    var board = new Board_Board({\n      columns: []\n    });\n    var outlet = document.querySelector(\'#outlet\');\n    this.eventBus = new EventBus();\n\n    if (window.location.hash === \'#main\') {\n      console.log(\'window.location.hash === #main\');\n    }\n\n    this.eventBus.subscribe(\'routeChanged\', function (page) {\n      switch (page) {\n        case \'main\':\n          calendar.isMounted && calendar.unmount();\n          board.mountTo(document.querySelector(\'#outlet\'));\n          break;\n\n        case \'calendar\':\n          board.isMounted && board.unmount();\n          calendar.mountTo(document.querySelector(\'#outlet\'));\n          break;\n\n        default:\n          break;\n      }\n    });\n    this.router = new Router({\n      \'#main\': function main() {\n        _this.eventBus.publish(\'routeChanged\', \'main\');\n      },\n      \'#calendar\': function calendar() {\n        _this.eventBus.publish(\'routeChanged\', \'calendar\');\n      }\n    });\n    this.mainElement = mainElement;\n    getColumns().then(function (columns) {\n      console.log(\'got data from server\', columns);\n      board.model.columns = columns;\n\n      _this.eventBus.publish(\'routeChanged\', \'main\');\n    }).catch(function (e) {\n      console.log(\'Error!\', e);\n    });\n  }\n\n  app_createClass(App, [{\n    key: "render",\n    value: function render() {\n      this.mainElement.innerHTML = this.template;\n      document.querySelector(\'.sidenav-trigger\').addEventListener(\'click\', function () {\n        this.sidenav = M.Sidenav.init(document.querySelector(\'.sidenav\'));\n        this.sidenav.open();\n      });\n    }\n  }]);\n\n  return App;\n}();\n\n\n// CONCATENATED MODULE: ./index.js\n\n\nwindow.onload = function () {\n  // const el = document.querySelector(\'#main\');\n  new app_App().render();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///6\n')}]);